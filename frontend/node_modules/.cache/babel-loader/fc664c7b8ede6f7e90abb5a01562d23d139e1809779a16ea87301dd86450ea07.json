{"ast":null,"code":"import axios from'axios';import{memoryCache}from'./cache';export const cachedApiRequest=async(method,url,data,cacheTTL,config)=>{// If cacheTTL is provided and it's a GET request, try to get from cache\nif(cacheTTL&&method.toLowerCase()==='get'){const cacheKey=`${method}-${url}`;const cachedData=memoryCache.get(cacheKey,cacheTTL);if(cachedData){return cachedData.data;}}try{const response=await axios({method,url,data,...config});// If cacheTTL is provided and it's a GET request, cache the response\nif(cacheTTL&&method.toLowerCase()==='get'){const cacheKey=`${method}-${url}`;const cacheData={data:response.data,timestamp:Date.now()};memoryCache.set(cacheKey,cacheData);}return response.data;}catch(error){console.error('API request failed:',error);throw error;}};export const apiRequest=async(method,url,data,config)=>{try{const response=await axios({method,url,data,...config});return response.data;}catch(error){console.error('API request failed:',error);throw error;}};// Export memoryCache and apiClient as a constant for backwards compatibility\nexport const apiClient={get:(url,config)=>apiRequest('get',url,undefined,config),post:(url,data,config)=>apiRequest('post',url,data,config),put:(url,data,config)=>apiRequest('put',url,data,config),delete:(url,config)=>apiRequest('delete',url,undefined,config)};// Export memoryCache for backward compatibility\nexport{memoryCache};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}