{"ast":null,"code":"import axios from'axios';// Backend API Configuration\nconst BACKEND_BASE_URL='http://localhost:5000/api';// Cache for BTTS statistics data\nconst bttsStatsCache={};// Clear cache function\nconst clearBTTSStatsCache=()=>{Object.keys(bttsStatsCache).forEach(key=>delete bttsStatsCache[key]);console.log('[BTTSStatsService] Cache cleared');};// Main function to fetch BTTS statistics from backend\nconst fetchBTTSStats=async function(matchId){let gameCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{// Create a cache key based on match ID and game count\nconst cacheKey=`${matchId}-${gameCount}`;// Check if we have cached data that's less than 1 hour old\nconst cachedData=bttsStatsCache[cacheKey];if(cachedData&&Date.now()-cachedData.timestamp<3600000){console.log(`[BTTSStatsService] Using cached BTTS stats data for ${cacheKey}`);return cachedData.data;}console.log(`[BTTSStatsService] Fetching BTTS stats from backend for match ${matchId} with ${gameCount} games`);// Make request to backend BTTS statistics endpoint\nconst response=await axios.get(`${BACKEND_BASE_URL}/matches/${matchId}/btts`,{params:{matches:gameCount},timeout:15000});if(!response.data||!response.data.success||!response.data.result){throw new Error('Invalid response from backend BTTS statistics endpoint');}const backendResult=response.data.result;// Transform backend response to match frontend BTTSStats interface\nconst result={homeStats:backendResult.homeStats,awayStats:backendResult.awayStats,h2hStats:backendResult.h2hStats,combinedStats:backendResult.combinedStats,isFallbackData:false// Backend only provides real data\n};// Cache the result\nbttsStatsCache[cacheKey]={data:result,timestamp:Date.now()};console.log(`[BTTSStatsService] Successfully fetched BTTS stats from backend for match ${matchId}`);console.log(`[BTTSStatsService] Home team: ${result.homeStats.bttsYesPercentage}% BTTS, Away team: ${result.awayStats.bttsYesPercentage}% BTTS`);console.log(`[BTTSStatsService] Combined prediction: ${result.combinedStats.prediction}`);return result;}catch(error){console.error('[BTTSStatsService] Error fetching BTTS stats from backend:',error);throw error;}};export default{fetchBTTSStats,clearBTTSStatsCache};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}