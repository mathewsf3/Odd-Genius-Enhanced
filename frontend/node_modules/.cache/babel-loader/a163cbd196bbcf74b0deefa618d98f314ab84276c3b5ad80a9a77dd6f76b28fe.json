{"ast":null,"code":"import axios from 'axios';\n\n// Base URLs for APIs\nconst BACKEND_BASE_URL = 'http://localhost:5000/api';\nconst ALLSPORTS_BASE_URL = 'https://apiv2.allsportsapi.com/football';\nconst API_KEY = '9af98e929db6f98a1561c444b6179b5740a69b942cb3ffcc62b80a7eda5128b4';\n\n// Cache configuration\nconst CACHE_EXPIRATION = 30 * 60 * 1000; // 30 minutes for leagues\nconst leaguesCache = {};\n\n// League interface\n\n/**\n * Fetch all live leagues with current matches\n */\nconst fetchLiveLeagues = async signal => {\n  try {\n    var _liveMatchesResponse$, _liveMatchesResponse$2;\n    console.log('[LeaguesService] Fetching live leagues...');\n\n    // Check cache first\n    const cacheKey = 'live_leagues';\n    const cachedData = leaguesCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRATION) {\n      console.log('[LeaguesService] Using cached live leagues data');\n      return cachedData.data;\n    }\n\n    // Fetch live matches to determine which leagues are currently active\n    const liveMatchesResponse = await axios.get(`${BACKEND_BASE_URL}/matches/live`, {\n      signal,\n      timeout: 10000\n    });\n    if (!((_liveMatchesResponse$ = liveMatchesResponse.data) !== null && _liveMatchesResponse$ !== void 0 && _liveMatchesResponse$.success) || !((_liveMatchesResponse$2 = liveMatchesResponse.data) !== null && _liveMatchesResponse$2 !== void 0 && _liveMatchesResponse$2.result)) {\n      console.warn('[LeaguesService] No live matches data available');\n      return null;\n    }\n    const liveMatches = liveMatchesResponse.data.result;\n    console.log(`[LeaguesService] Found ${liveMatches.length} live matches`);\n\n    // Extract unique leagues from live matches\n    const leagueMap = new Map();\n    liveMatches.forEach(match => {\n      if (match.league) {\n        const leagueId = match.league.id || match.league.key;\n        if (!leagueMap.has(leagueId)) {\n          leagueMap.set(leagueId, {\n            id: leagueId,\n            name: match.league.name,\n            country: match.league.country || 'International',\n            logo: match.league.logo,\n            season: match.league.season || new Date().getFullYear(),\n            type: match.league.type || 'league',\n            isLive: true,\n            matchCount: 1,\n            lastUpdated: new Date().toISOString(),\n            api: 'allsports'\n          });\n        } else {\n          const existing = leagueMap.get(leagueId);\n          existing.matchCount = (existing.matchCount || 0) + 1;\n        }\n      }\n    });\n    const leagues = Array.from(leagueMap.values());\n\n    // Group leagues by country\n    const countryGroups = new Map();\n    leagues.forEach(league => {\n      const country = league.country || 'International';\n      if (!countryGroups.has(country)) {\n        countryGroups.set(country, []);\n      }\n      countryGroups.get(country).push(league);\n    });\n\n    // Convert to grouped format\n    const groupedByCountry = Array.from(countryGroups.entries()).map(([country, leagues]) => ({\n      country,\n      leagues: leagues.sort((a, b) => (b.matchCount || 0) - (a.matchCount || 0)),\n      totalMatches: leagues.reduce((sum, league) => sum + (league.matchCount || 0), 0)\n    })).sort((a, b) => b.totalMatches - a.totalMatches);\n    const result = {\n      success: true,\n      result: {\n        leagues,\n        groupedByCountry,\n        totalLeagues: leagues.length,\n        totalMatches: liveMatches.length,\n        lastUpdated: new Date().toISOString()\n      }\n    };\n\n    // Cache the result\n    leaguesCache[cacheKey] = {\n      data: result,\n      timestamp: Date.now()\n    };\n    console.log(`[LeaguesService] Successfully fetched ${leagues.length} live leagues from ${groupedByCountry.length} countries`);\n    return result;\n  } catch (error) {\n    console.error('[LeaguesService] Error fetching live leagues:', error);\n    return null;\n  }\n};\n\n/**\n * Fetch all available leagues (not just live ones)\n */\nconst fetchAllLeagues = async (countryId, signal) => {\n  try {\n    var _response$data, _response$data2;\n    console.log('[LeaguesService] Fetching all available leagues...');\n    const cacheKey = `all_leagues_${countryId || 'all'}`;\n    const cachedData = leaguesCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRATION) {\n      console.log('[LeaguesService] Using cached all leagues data');\n      return cachedData.data;\n    }\n\n    // Fetch from AllSportsAPI\n    const params = {\n      met: 'Leagues',\n      APIkey: API_KEY\n    };\n    if (countryId) {\n      params.countryId = countryId;\n    }\n    const response = await axios.get(ALLSPORTS_BASE_URL, {\n      params,\n      signal,\n      timeout: 15000\n    });\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success) || !((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.result)) {\n      console.warn('[LeaguesService] No leagues data available from AllSportsAPI');\n      return [];\n    }\n    const leagues = response.data.result.map(league => ({\n      id: league.league_key,\n      name: league.league_name,\n      country: league.country_name,\n      logo: league.league_logo,\n      season: league.league_season || new Date().getFullYear(),\n      type: 'league',\n      isLive: false,\n      api: 'allsports'\n    }));\n\n    // Cache the result\n    leaguesCache[cacheKey] = {\n      data: leagues,\n      timestamp: Date.now()\n    };\n    console.log(`[LeaguesService] Successfully fetched ${leagues.length} leagues`);\n    return leagues;\n  } catch (error) {\n    console.error('[LeaguesService] Error fetching all leagues:', error);\n    return [];\n  }\n};\n\n/**\n * Get league details with current standings\n */\nconst getLeagueDetails = async (leagueId, signal) => {\n  try {\n    var _response$data3;\n    console.log(`[LeaguesService] Fetching details for league ${leagueId}`);\n    const response = await axios.get(`${BACKEND_BASE_URL}/leagues/${leagueId}/standings`, {\n      signal,\n      timeout: 10000\n    });\n    if (!((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success)) {\n      console.warn(`[LeaguesService] No standings data for league ${leagueId}`);\n      return null;\n    }\n    return response.data.result;\n  } catch (error) {\n    console.error(`[LeaguesService] Error fetching league details for ${leagueId}:`, error);\n    return null;\n  }\n};\n\n/**\n * Clear leagues cache\n */\nconst clearLeaguesCache = () => {\n  Object.keys(leaguesCache).forEach(key => {\n    delete leaguesCache[key];\n  });\n  console.log('[LeaguesService] Cache cleared');\n};\n\n/**\n * Get countries with leagues\n */\nconst fetchCountries = async signal => {\n  try {\n    var _response$data4, _response$data5;\n    console.log('[LeaguesService] Fetching countries...');\n    const response = await axios.get(ALLSPORTS_BASE_URL, {\n      params: {\n        met: 'Countries',\n        APIkey: API_KEY\n      },\n      signal,\n      timeout: 10000\n    });\n    if (!((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.success) || !((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.result)) {\n      return [];\n    }\n    return response.data.result.map(country => ({\n      id: country.country_key,\n      name: country.country_name,\n      logo: country.country_logo\n    }));\n  } catch (error) {\n    console.error('[LeaguesService] Error fetching countries:', error);\n    return [];\n  }\n};\n\n// Export the service\nconst leaguesService = {\n  fetchLiveLeagues,\n  fetchAllLeagues,\n  getLeagueDetails,\n  fetchCountries,\n  clearLeaguesCache\n};\nexport default leaguesService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}