{"ast":null,"code":"import axios from 'axios';\n// Backend API Configuration - Use same pattern as Card Stats and BTTS\nconst BACKEND_BASE_URL = 'http://localhost:5000/api';\nconsole.log('[CornerStatsService] Initialized with backend URL:', BACKEND_BASE_URL);\n\n// Simple cache object to store previous API responses\n\nconst cornerStatsCache = {};\n\n// Clear cache function\nconst clearCornerStatsCache = () => {\n  Object.keys(cornerStatsCache).forEach(key => delete cornerStatsCache[key]);\n  console.log('[CornerStatsService] Cache cleared');\n};\n\n// Main function to fetch corner statistics using backend endpoint (like Card Stats)\nexport const fetchCornerStats = async (matchId, gameCount = 10) => {\n  try {\n    console.log(`[CornerStatsService] Fetching corner stats from backend for match ${matchId} with ${gameCount} games`);\n\n    // Create a cache key based on match ID and game count\n    const cacheKey = `${matchId}-${gameCount}`;\n\n    // Check if we have cached data that's less than 1 hour old\n    const cachedData = cornerStatsCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < 3600000) {\n      console.log(`[CornerStatsService] Using cached corner stats data for ${cacheKey}`);\n      return cachedData.data;\n    }\n    console.log(`[CornerStatsService] Making request to backend corner stats endpoint`);\n\n    // Make request to backend corner statistics endpoint (same pattern as Card Stats)\n    const response = await axios.get(`${BACKEND_BASE_URL}/matches/${matchId}/corners`, {\n      params: {\n        matches: gameCount\n      },\n      timeout: 15000\n    });\n    if (!response.data || !response.data.success || !response.data.result) {\n      throw new Error('Invalid response from backend corner statistics endpoint');\n    }\n    const cornerStats = response.data.result;\n\n    // Cache the result for 1 hour\n    cornerStatsCache[cacheKey] = {\n      data: cornerStats,\n      timestamp: Date.now()\n    };\n    console.log(`[CornerStatsService] Successfully fetched corner stats from backend for match ${matchId}`);\n    return cornerStats;\n  } catch (error) {\n    console.error('[CornerStatsService] Error fetching corner statistics from backend:', error);\n    throw new Error(`Failed to fetch corner statistics: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n};\n\n// Export the service with clear cache function\nexport default {\n  fetchCornerStats,\n  clearCornerStatsCache\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}