{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useParams}from'react-router-dom';import{Box,Container,Spinner,useColorModeValue,Tabs,TabList,TabPanels,Tab,TabPanel,Flex,Badge,Tooltip,Button}from'@chakra-ui/react';import axios from'axios';// Component imports\nimport CustomHeadToHeadTab from'../components/match/CustomHeadToHeadTab';import CornerTabCustom from'../components/match/CornerTabCustom';import CustomCardsTab from'../components/match/CustomCardsTab';import CustomBTTSTab from'../components/match/CustomBTTSTab';import CustomPlayerStatsTab from'../components/match/CustomPlayerStatsTab';import CustomLeagueTab from'../components/match/CustomLeagueTab';import MatchHeader from'../components/match/MatchHeader';// Import services\nimport cardStatsService from'../services/cardStatsService';import bttsStatsService from'../services/bttsStatsService';import playerStatsService from'../services/playerStatsService';import leagueService from'../services/leagueService';import teamFormService from'../services/teamFormService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Initial match data structure - will be populated with real data from API\nconst INITIAL_MATCH_DATA={id:'',homeTeam:{id:'',name:'',logo:''},awayTeam:{id:'',name:'',logo:''},league:{id:'',name:'',country:'',logo:''},date:'',time:'',startTime:'',status:'',venue:'',odds:{home:0,draw:0,away:0},probability:{home:'0%',draw:'0%',away:'0%'},score:{home:0,away:0}};const SpecialMatch=_ref=>{let{matchId:propMatchId}=_ref;const params=useParams();const matchId=propMatchId||params.id||'1530359';// Use prop, then route param, then default (working match ID)\nconst[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[h2hData,setH2hData]=useState(null);const[cornerStatsData,setCornerStatsData]=useState(null);const[cardStatsData,setCardStatsData]=useState(null);const[bttsStatsData,setBttsStatsData]=useState(null);const[playerStatsData,setPlayerStatsData]=useState(null);const[leagueStandingsData,setLeagueStandingsData]=useState(null);const[homeTeamForm,setHomeTeamForm]=useState(null);const[awayTeamForm,setAwayTeamForm]=useState(null);const[tabIndex,setTabIndex]=useState(0);const[gameCount,setGameCount]=useState(10);const[matchData,setMatchData]=useState(INITIAL_MATCH_DATA);const bgColor=useColorModeValue('white','gray.800');// Function to fetch real match data based on route parameter\nconst fetchMatchData=async id=>{try{setIsLoading(true);setError(null);console.log(`🔍 [SpecialMatch] Fetching match data for ID: ${id}`);console.log(`🔍 [SpecialMatch] Previous match data:`,matchData);// Clear all existing data when fetching new match\nsetH2hData(null);setCornerStatsData(null);setCardStatsData(null);setBttsStatsData(null);setPlayerStatsData(null);setLeagueStandingsData(null);setHomeTeamForm(null);setAwayTeamForm(null);// Try to fetch match data from backend API\nconst response=await axios.get(`http://localhost:5000/api/matches/${id}`);if(response.data&&response.data.success&&response.data.result){console.log('✅ [SpecialMatch] Successfully fetched real match data from backend:',response.data.result);setMatchData(response.data.result);setIsLoading(false);return response.data.result;}else{console.log('⚠️ [SpecialMatch] No match data found in backend, trying AllSportsAPI directly');// Try to fetch from AllSportsAPI directly\nconst directResponse=await axios.get(`https://apiv2.allsportsapi.com/football/?met=Fixtures&APIkey=9af98e929db6f98a1561c444b6179b5740a69b942cb3ffcc62b80a7eda5128b4&matchId=${id}`);if(directResponse.data&&directResponse.data.success&&directResponse.data.result&&directResponse.data.result.length>0){const matchResult=directResponse.data.result[0];console.log('✅ [SpecialMatch] Successfully fetched match data from AllSportsAPI:',matchResult);// Transform the API response to our Match interface\nconst transformedMatch={id:matchResult.match_id||id,homeTeam:{id:`team-${matchResult.match_hometeam_id}`,name:matchResult.match_hometeam_name||'Home Team',logo:matchResult.team_home_badge||''},awayTeam:{id:`team-${matchResult.match_awayteam_id}`,name:matchResult.match_awayteam_name||'Away Team',logo:matchResult.team_away_badge||''},league:{id:matchResult.league_id||'',name:matchResult.league_name||'Unknown League',country:matchResult.country_name||'',logo:matchResult.league_logo||''},date:matchResult.match_date||'',time:matchResult.match_time||'',startTime:`${matchResult.match_date}T${matchResult.match_time}:00`,status:matchResult.match_status||'NS',venue:matchResult.match_stadium||'',odds:{home:parseFloat(matchResult.match_hometeam_score)||0,draw:0,away:parseFloat(matchResult.match_awayteam_score)||0},probability:{home:'0%',draw:'0%',away:'0%'},score:{home:parseInt(matchResult.match_hometeam_score)||0,away:parseInt(matchResult.match_awayteam_score)||0}};console.log('🔄 [SpecialMatch] Transformed match data:',transformedMatch);setMatchData(transformedMatch);setIsLoading(false);return transformedMatch;}else{throw new Error('No match data found in AllSportsAPI');}}}catch(error){console.error('❌ [SpecialMatch] Error fetching match data:',error);setError(`Unable to load match data for ID: ${id}. This match may not be available in the current live or upcoming matches. Please try selecting a different match from the dashboard.`);setIsLoading(false);return null;}};// Function to fetch corner stats data\nconst fetchCornerStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`🔍 [SpecialMatch] Fetching corner statistics from backend for match ID: ${matchId}`);// First clear existing data only if count has changed to ensure we see a loading state\nif(count!==gameCount){setCornerStatsData(null);}// Add a small delay for better UX when using cached data\nif(count===gameCount){await new Promise(resolve=>setTimeout(resolve,500));}// Fetch corner statistics from backend endpoint with match count parameter\nconst response=await axios.get(`http://localhost:5000/api/matches/${matchId}/corners?matches=${count}`);if(response.data&&response.data.success&&response.data.result){console.log('✅ [SpecialMatch] Successfully fetched corner stats from backend:',response.data.result);// Update gameCount state if it has changed\nif(count!==gameCount){setGameCount(count);}setCornerStatsData(response.data.result);// Clear any previous errors\nif(error){setError(null);}return response.data.result;}else{throw new Error('No corner statistics data found in backend response');}}catch(err){console.error('❌ [SpecialMatch] Error fetching corner stats data:',err);// Set error state to inform the user that corner stats data couldn't be loaded\nsetError('Unable to load corner statistics data. Please try again later.');throw err;// Rethrow to allow the component to handle it\n}};// Function to fetch card stats data\nconst fetchCardStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`🔍 [SpecialMatch] Fetching card statistics from backend for match ID: ${matchId}`);// First clear existing data only if count has changed to ensure we see a loading state\nif(count!==gameCount){setCardStatsData(null);}// Add a small delay for better UX when using cached data\nif(count===gameCount){await new Promise(resolve=>setTimeout(resolve,500));}// Use the card stats service to fetch data from backend\nconst data=await cardStatsService.fetchCardStats(matchId,count);console.log('✅ [SpecialMatch] Successfully fetched card stats from backend:',data);// Update gameCount state if it has changed\nif(count!==gameCount){setGameCount(count);}setCardStatsData(data);// Clear any previous errors\nif(error){setError(null);}return data;}catch(err){console.error('❌ [SpecialMatch] Error fetching card stats data:',err);// Set error state to inform the user that card stats data couldn't be loaded\nsetError('Unable to load card statistics data. Please try again later.');throw err;// Rethrow to allow the component to handle it\n}};// Function to fetch BTTS stats data\nconst fetchBTTSStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`Fetching BTTS statistics with ${count} games - fresh API call`);// First clear existing data only if count has changed to ensure we see a loading state\nif(count!==gameCount){setBttsStatsData(null);}// Get team IDs - remove \"team-\" prefix if it exists since API expects numeric IDs\nconst rawHomeTeamId=matchData.homeTeam.id;// e.g. \"team-93\"\nconst rawAwayTeamId=matchData.awayTeam.id;// e.g. \"team-4973\"\n// Extract team IDs - handle both numeric IDs and name-based IDs\nconst homeTeamId=rawHomeTeamId.startsWith('team-')?rawHomeTeamId.replace('team-',''):rawHomeTeamId;const awayTeamId=rawAwayTeamId.startsWith('team-')?rawAwayTeamId.replace('team-',''):rawAwayTeamId;console.log(`Fetching BTTS statistics for teams - Raw IDs: ${rawHomeTeamId} vs ${rawAwayTeamId}`);console.log(`Using processed IDs: ${homeTeamId} vs ${awayTeamId} with ${count} games`);// Check if both teams have numeric IDs (required for API calls)\nconst homeTeamHasNumericId=/^\\d+$/.test(homeTeamId);const awayTeamHasNumericId=/^\\d+$/.test(awayTeamId);if(!homeTeamHasNumericId||!awayTeamHasNumericId){console.warn('⚠️ [SpecialMatch] Teams do not have numeric IDs, skipping BTTS stats:',{homeTeamId,awayTeamId,homeTeamHasNumericId,awayTeamHasNumericId});setBttsStatsData(null);return;}// Add a small delay for better UX when using cached data\nif(count===gameCount){await new Promise(resolve=>setTimeout(resolve,500));}const data=await bttsStatsService.fetchBTTSStats(homeTeamId,awayTeamId,count);console.log(`Successfully fetched BTTS stats data for ${count} games`);// Update gameCount state if it has changed\nif(count!==gameCount){setGameCount(count);}setBttsStatsData(data);// Clear any previous errors\nif(error){setError(null);}return data;}catch(err){console.error('Error fetching BTTS stats data:',err);// Set error state to inform the user that BTTS stats data couldn't be loaded\nsetError('Unable to load BTTS statistics data. Please try again later.');throw err;// Rethrow to allow the component to handle it\n}};// Function to fetch player stats data\nconst fetchPlayerStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`Fetching player statistics with ${count} games - fresh API call`);// First clear existing data to ensure we see a loading state\nsetPlayerStatsData(null);// Get team IDs - remove \"team-\" prefix if it exists since API expects numeric IDs\nconst rawHomeTeamId=matchData.homeTeam.id;// e.g. \"team-93\"\nconst rawAwayTeamId=matchData.awayTeam.id;// e.g. \"team-4973\"\n// Extract team IDs - handle both numeric IDs and name-based IDs\nconst homeTeamId=rawHomeTeamId.startsWith('team-')?rawHomeTeamId.replace('team-',''):rawHomeTeamId;const awayTeamId=rawAwayTeamId.startsWith('team-')?rawAwayTeamId.replace('team-',''):rawAwayTeamId;const leagueId=matchData.league.id;console.log(`Fetching player statistics for teams - Raw IDs: ${rawHomeTeamId} vs ${rawAwayTeamId}`);console.log(`Using processed IDs: ${homeTeamId} vs ${awayTeamId} with league ID: ${leagueId} and ${count} games`);// Check if both teams have numeric IDs (required for API calls)\nconst homeTeamHasNumericId=/^\\d+$/.test(homeTeamId);const awayTeamHasNumericId=/^\\d+$/.test(awayTeamId);if(!homeTeamHasNumericId||!awayTeamHasNumericId){console.warn('⚠️ [SpecialMatch] Teams do not have numeric IDs, skipping player stats:',{homeTeamId,awayTeamId,homeTeamHasNumericId,awayTeamHasNumericId});setPlayerStatsData(null);return;}// Add a small delay for better UX\nawait new Promise(resolve=>setTimeout(resolve,500));const data=await playerStatsService.fetchPlayerStats(homeTeamId,awayTeamId,leagueId,count);console.log(`Successfully fetched player stats data for ${count} games`);// Update gameCount state if it has changed\nif(count!==gameCount){setGameCount(count);}setPlayerStatsData(data);// Clear any previous errors\nif(error){setError(null);}return data;}catch(err){console.error('Error fetching player stats data:',err);// Set error state to inform the user that player stats data couldn't be loaded\nsetError('Unable to load player statistics data. Please try again later.');throw err;// Rethrow to allow the component to handle it\n}};// Function to fetch team form data\nconst fetchTeamFormData=async()=>{try{console.log(`Fetching team form data - fresh API call`);// First clear existing data to ensure we see a loading state\nsetHomeTeamForm(null);setAwayTeamForm(null);// Get team IDs - remove \"team-\" prefix if it exists since API expects numeric IDs\nconst rawHomeTeamId=matchData.homeTeam.id;// e.g. \"team-93\"\nconst rawAwayTeamId=matchData.awayTeam.id;// e.g. \"team-4973\"\n// Extract team IDs - handle both numeric IDs and name-based IDs\nconst homeTeamId=rawHomeTeamId.startsWith('team-')?rawHomeTeamId.replace('team-',''):rawHomeTeamId;const awayTeamId=rawAwayTeamId.startsWith('team-')?rawAwayTeamId.replace('team-',''):rawAwayTeamId;console.log(`Fetching form data for teams - Raw IDs: ${rawHomeTeamId} vs ${rawAwayTeamId}`);console.log(`Using processed IDs: ${homeTeamId} vs ${awayTeamId}`);// Check if both teams have numeric IDs (required for API calls)\nconst homeTeamHasNumericId=/^\\d+$/.test(homeTeamId);const awayTeamHasNumericId=/^\\d+$/.test(awayTeamId);if(!homeTeamHasNumericId||!awayTeamHasNumericId){console.warn('⚠️ [SpecialMatch] Teams do not have numeric IDs, skipping form data:',{homeTeamId,awayTeamId,homeTeamHasNumericId,awayTeamHasNumericId});setHomeTeamForm(null);setAwayTeamForm(null);return;}// Add a small delay for better UX\nawait new Promise(resolve=>setTimeout(resolve,500));const formData=await teamFormService.fetchMatchTeamsForm(homeTeamId,matchData.homeTeam.name,awayTeamId,matchData.awayTeam.name);console.log(`Successfully fetched team form data`);setHomeTeamForm(formData.homeTeamForm);setAwayTeamForm(formData.awayTeamForm);// Clear any previous errors\nif(error){setError(null);}return formData;}catch(err){console.error('Error fetching team form data:',err);// Set error state to inform the user that form data couldn't be loaded\nsetError('Unable to load team form data. Please try again later.');throw err;// Rethrow to allow the component to handle it\n}};// Function to fetch league standings data\nconst fetchLeagueStandingsData=async()=>{try{console.log(`Fetching league standings data - fresh API call`);// First clear existing data to ensure we see a loading state\nsetLeagueStandingsData(null);// Get league ID from match data\nconst leagueId=matchData.league.id;// Get team IDs - remove \"team-\" prefix if it exists since API expects numeric IDs\nconst rawHomeTeamId=matchData.homeTeam.id;// e.g. \"team-93\"\nconst rawAwayTeamId=matchData.awayTeam.id;// e.g. \"team-4973\"\n// Extract team IDs - handle both numeric IDs and name-based IDs\nconst homeTeamId=rawHomeTeamId.startsWith('team-')?rawHomeTeamId.replace('team-',''):rawHomeTeamId;const awayTeamId=rawAwayTeamId.startsWith('team-')?rawAwayTeamId.replace('team-',''):rawAwayTeamId;console.log(`Fetching league standings for league ID: ${leagueId}`);console.log(`Home team ID: ${homeTeamId}, Away team ID: ${awayTeamId}`);// Add a small delay for better UX\nawait new Promise(resolve=>setTimeout(resolve,500));const data=await leagueService.fetchLeagueStandings(leagueId,homeTeamId,awayTeamId);console.log(`Successfully fetched league standings data`);setLeagueStandingsData(data);// Clear any previous errors\nif(error){setError(null);}return data;}catch(err){console.error('Error fetching league standings data:',err);// Set error state to inform the user that league standings data couldn't be loaded\nsetError('Unable to load league standings data. Please try again later.');throw err;// Rethrow to allow the component to handle it\n}};// Fetch all statistics data after match data is loaded\nuseEffect(()=>{// Only fetch stats if we have valid match data (team IDs are not empty)\nif(matchData.homeTeam.id&&matchData.awayTeam.id&&matchData.homeTeam.id!==''&&matchData.awayTeam.id!==''){console.log('Match data loaded, now fetching all statistics...');fetchCornerStatsData();fetchCardStatsData();fetchBTTSStatsData();fetchPlayerStatsData();fetchLeagueStandingsData();fetchTeamFormData();}},[matchData.homeTeam.id,matchData.awayTeam.id]);// Trigger when team IDs change\n// Listen for game count change events\nuseEffect(()=>{// Event handler for game count changes\nconst handleGameCountChange=e=>{const newGameCount=e.detail.gameCount;const requiresRefetch=e.detail.requiresRefetch;console.log(`Game count changed to ${newGameCount}, requires refetch: ${requiresRefetch}`);// First update state\nsetGameCount(newGameCount);// Clear existing data to indicate loading state\nsetCornerStatsData(null);setCardStatsData(null);setBttsStatsData(null);setPlayerStatsData(null);// Then trigger data refresh with full refetch from API\nfetchCornerStatsData(newGameCount);fetchCardStatsData(newGameCount);fetchBTTSStatsData(newGameCount);fetchPlayerStatsData(newGameCount);};// Add event listener\ndocument.addEventListener('gameCountChange',handleGameCountChange);// Clean up\nreturn()=>{document.removeEventListener('gameCountChange',handleGameCountChange);};},[/* no dependencies to ensure it's only set up once */]);// Fetch match data when component mounts or matchId changes\nuseEffect(()=>{console.log(`SpecialMatch component mounted with matchId: ${matchId}`);console.log(`Current match data:`,matchData);console.log(`Route params:`,params);console.log(`Prop matchId:`,propMatchId);fetchMatchData(matchId);},[matchId]);// Fetch H2H data using our service with UPDATED API KEY\nuseEffect(()=>{// Only fetch H2H data if we have valid match data\nif(!matchData.homeTeam.id||!matchData.awayTeam.id||matchData.homeTeam.id===''||matchData.awayTeam.id===''){console.log(\"Waiting for match data before fetching H2H data...\");return;}console.log(\"Starting to fetch head-to-head data with updated API key...\");const fetchH2HData=async()=>{try{// Extract team IDs from the URL format\nconst homeTeamId=matchData.homeTeam.id.replace('team-','');// 93\nconst awayTeamId=matchData.awayTeam.id.replace('team-','');// 4973\nconsole.log(`Fetching real H2H data for teams ${homeTeamId} vs ${awayTeamId}`);// Check if both teams have numeric IDs (required for API calls)\nconst homeTeamHasNumericId=/^\\d+$/.test(homeTeamId);const awayTeamHasNumericId=/^\\d+$/.test(awayTeamId);if(!homeTeamHasNumericId||!awayTeamHasNumericId){console.warn('⚠️ [SpecialMatch] Teams do not have numeric IDs, skipping H2H data:',{homeTeamId,awayTeamId,homeTeamHasNumericId,awayTeamHasNumericId});setError('H2H data not available - teams do not have numeric IDs required for API calls');return;}// Use backend H2H endpoint to ensure consistency with backend logs\nconsole.log(`Making H2H request to backend: /api/matches/${matchId}/h2h`);const response=await axios.get(`http://localhost:5000/api/matches/${matchId}/h2h`);console.log('Backend H2H response received:',response.data.success?'Success':'Failed');if(response.data&&response.data.success){// Backend returns already transformed H2H data\nconst h2hData=response.data.result;console.log('Backend H2H data received:',h2hData);// Ensure the data has the correct structure\nif(h2hData&&h2hData.matches&&h2hData.summary){// Set the data directly since it's already in the correct format\nsetH2hData(h2hData);console.log(`Successfully processed ${h2hData.matches.length} head-to-head matches from backend`);console.log(`${h2hData.firstTeam.name} wins: ${h2hData.summary.wins.firstTeam}`);console.log(`${h2hData.secondTeam.name} wins: ${h2hData.summary.wins.secondTeam}`);console.log(`Draws: ${h2hData.summary.wins.draws}`);}else{console.error('Invalid H2H data structure from backend:',h2hData);setError('Invalid head-to-head data received from backend');}}else{setError('Failed to fetch head-to-head data');}}catch(err){console.error('Error fetching H2H data:',err);// Provide a more specific error message\nif(err instanceof Error){setError(`Error fetching head-to-head data: ${err.message}`);}else{setError('Error fetching head-to-head data: Unknown error');}}finally{setIsLoading(false);}};fetchH2HData();},[matchData.homeTeam.id,matchData.awayTeam.id]);if(isLoading){return/*#__PURE__*/_jsx(Container,{centerContent:true,py:10,children:/*#__PURE__*/_jsx(Spinner,{size:\"xl\"})});}if(error){return/*#__PURE__*/_jsx(Container,{centerContent:true,py:10,children:/*#__PURE__*/_jsx(Box,{bg:\"red.100\",border:\"4px solid\",borderColor:\"red.500\",color:\"red.700\",p:4,borderRadius:\"md\",children:/*#__PURE__*/_jsx(\"p\",{children:error})})});}return/*#__PURE__*/_jsx(Box,{bg:bgColor,minH:\"100vh\",children:/*#__PURE__*/_jsxs(Container,{maxW:\"container.xl\",py:5,children:[/*#__PURE__*/_jsxs(Box,{bg:bgColor,p:4,borderRadius:\"md\",boxShadow:\"sm\",mb:4,children:[/*#__PURE__*/_jsx(MatchHeader,{match:matchData,homeTeamForm:homeTeamForm,awayTeamForm:awayTeamForm,isLoadingForm:!homeTeamForm&&!awayTeamForm&&!error}),\"            \",/*#__PURE__*/_jsx(Box,{mt:2,p:2,bg:\"blue.50\",borderRadius:\"md\",fontSize:\"sm\",color:\"blue.700\",children:/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Data Source:\"}),\" AllSportsAPI - Real H2H data for \",matchData.homeTeam.name,\" vs \",matchData.awayTeam.name,\"(Updated: \",new Date().toLocaleDateString(),\")\"]}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",gap:2,children:[/*#__PURE__*/_jsxs(Badge,{colorScheme:\"blue\",fontSize:\"sm\",children:[\"Analyzing: Last \",gameCount,\" matches\"]}),/*#__PURE__*/_jsx(Tooltip,{label:\"Clear all data cache\",children:/*#__PURE__*/_jsx(Button,{size:\"xs\",colorScheme:\"blue\",variant:\"ghost\",onClick:()=>{cardStatsService.clearCardStatsCache();bttsStatsService.clearBTTSStatsCache();playerStatsService.clearPlayerStatsCache();leagueService.clearLeagueStandingsCache();teamFormService.clearAllCache();// Refresh all stats with force refresh\nfetchCornerStatsData(gameCount);fetchCardStatsData(gameCount);fetchBTTSStatsData(gameCount);fetchPlayerStatsData(gameCount);fetchLeagueStandingsData();fetchTeamFormData();},children:\"Reset Cache\"})})]})]})})]}),/*#__PURE__*/_jsx(Box,{mt:6,children:/*#__PURE__*/_jsxs(Tabs,{isFitted:true,variant:\"enclosed\",colorScheme:\"blue\",index:tabIndex,onChange:index=>{console.log(`Switching to tab index ${index}, keeping gameCount: ${gameCount}`);setTabIndex(index);},children:[/*#__PURE__*/_jsxs(TabList,{mb:\"1em\",children:[/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Head to Head\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Corner Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Card Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"BTTS Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Player Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"League\"})]}),/*#__PURE__*/_jsxs(TabPanels,{children:[/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CustomHeadToHeadTab,{match:matchData,data:h2hData,isLoading:false,initialMatchRange:gameCount},h2hData?`h2h-${h2hData.summary.wins.firstTeam}-${h2hData.summary.wins.secondTeam}-${h2hData.summary.wins.draws}-${h2hData.summary.goals.firstTeam}-${h2hData.summary.goals.secondTeam}-${gameCount}`:'h2h-loading')}),/*#__PURE__*/_jsxs(TabPanel,{p:0,children:[console.log(\"Corner stats data in SpecialMatch:\",cornerStatsData),/*#__PURE__*/_jsx(CornerTabCustom,{match:matchData,data:cornerStatsData,isLoading:!cornerStatsData&&!error,initialGameCount:gameCount.toString(),onRefresh:fetchCornerStatsData},gameCount+\"-\"+(cornerStatsData?'data':'no-data'))]}),/*#__PURE__*/_jsxs(TabPanel,{p:0,children:[console.log(\"Card stats data in SpecialMatch:\",cardStatsData),/*#__PURE__*/_jsx(CustomCardsTab,{match:matchData,data:cardStatsData,isLoading:!cardStatsData&&!error,initialGameCount:gameCount.toString(),onRefresh:fetchCardStatsData},gameCount+\"-\"+(cardStatsData?'data':'no-data'))]}),/*#__PURE__*/_jsxs(TabPanel,{p:0,children:[console.log(\"BTTS stats data in SpecialMatch:\",bttsStatsData),/*#__PURE__*/_jsx(CustomBTTSTab,{match:matchData,data:bttsStatsData,isLoading:!bttsStatsData&&!error,initialGameCount:gameCount.toString(),onRefresh:fetchBTTSStatsData},gameCount+\"-\"+(bttsStatsData?'data':'no-data'))]}),/*#__PURE__*/_jsxs(TabPanel,{p:0,children:[console.log(\"Player stats data in SpecialMatch:\",playerStatsData),/*#__PURE__*/_jsx(CustomPlayerStatsTab,{match:matchData,data:playerStatsData,isLoading:!playerStatsData&&!error,initialGameCount:gameCount.toString(),onGameCountChange:count=>{console.log(`Changing game count to ${count} from Player Stats tab`);// Dispatch the same event as other tabs\nconst customEvent=new CustomEvent('gameCountChange',{detail:{gameCount:count,requiresRefetch:true},bubbles:true});document.dispatchEvent(customEvent);},onRefresh:fetchPlayerStatsData},gameCount+\"-\"+(playerStatsData?'data':'no-data'))]}),/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CustomLeagueTab,{match:matchData,data:leagueStandingsData,isLoading:!leagueStandingsData&&!error,onRefresh:fetchLeagueStandingsData},\"league-standings\")})]})]})})]})});};export default SpecialMatch;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}