{"ast":null,"code":"import axios from'axios';// Base URLs for APIs\nconst BACKEND_BASE_URL='http://localhost:5000/api';const ALLSPORTS_BASE_URL='https://apiv2.allsportsapi.com/football';const API_KEY='9af98e929db6f98a1561c444b6179b5740a69b942cb3ffcc62b80a7eda5128b4';// Cache configuration\nconst CACHE_EXPIRATION=30*60*1000;// 30 minutes for leagues\nconst LOGO_CACHE_EXPIRATION=24*60*60*1000;// 24 hours for logos\nconst leaguesCache={};const logoCache={};// Logo management utilities\nconst createLogoAsset=function(url){var _url$split$pop;let quality=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'medium';const fallbackUrl=`https://ui-avatars.com/api/?name=${encodeURIComponent(((_url$split$pop=url.split('/').pop())===null||_url$split$pop===void 0?void 0:_url$split$pop.substring(0,2))||'L')}&background=252535&color=6366F1&bold=true&size=128`;return{url:url||fallbackUrl,fallbackUrl,cached:false,quality,format:url!==null&&url!==void 0&&url.includes('.svg')?'svg':url!==null&&url!==void 0&&url.includes('.webp')?'webp':'png',size:'md'};};const optimizeLogo=function(logoAsset){let targetSize=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'md';const sizeMap={sm:'64',md:'128',lg:'256'};const size=sizeMap[targetSize];// If it's a UI avatar, update the size parameter\nif(logoAsset.url.includes('ui-avatars.com')){const updatedUrl=logoAsset.url.replace(/size=\\d+/,`size=${size}`);return{...logoAsset,url:updatedUrl,size:targetSize};}return{...logoAsset,size:targetSize};};// Enhanced League interface based on AI team analysis\n// Logo asset management interface\n// League filters interface\n// Enhanced league state interface\n/**\n * Enhanced function to fetch all leagues with live/upcoming status\n */const fetchEnhancedLeagues=async(filters,signal)=>{try{var _leaguesResponse$data,_leaguesResponse$data2;console.log('[LeaguesService] Fetching enhanced leagues with filters:',filters);// Check cache first\nconst cacheKey=`enhanced_leagues_${JSON.stringify(filters||{})}`;const cachedData=leaguesCache[cacheKey];if(cachedData&&Date.now()-cachedData.timestamp<CACHE_EXPIRATION){console.log('[LeaguesService] Using cached enhanced leagues data');return cachedData.data;}// Fetch leagues from AllSportsAPI\nconst leaguesResponse=await axios.get(ALLSPORTS_BASE_URL,{params:{met:'Leagues',APIkey:API_KEY,...((filters===null||filters===void 0?void 0:filters.country)&&{countryId:filters.country})},signal,timeout:15000});if(!((_leaguesResponse$data=leaguesResponse.data)!==null&&_leaguesResponse$data!==void 0&&_leaguesResponse$data.success)||!((_leaguesResponse$data2=leaguesResponse.data)!==null&&_leaguesResponse$data2!==void 0&&_leaguesResponse$data2.result)){console.warn('[LeaguesService] No leagues data from AllSportsAPI');return[];}// Try to fetch live/upcoming matches, but don't fail if backend is down\nlet liveMatches=[];let upcomingMatches=[];try{var _liveMatchesResponse$;console.log('[LeaguesService] Attempting to fetch live matches...');const liveMatchesResponse=await axios.get(`${BACKEND_BASE_URL}/matches/live`,{signal,timeout:5000});liveMatches=((_liveMatchesResponse$=liveMatchesResponse.data)===null||_liveMatchesResponse$===void 0?void 0:_liveMatchesResponse$.result)||[];console.log(`[LeaguesService] Successfully fetched ${liveMatches.length} live matches`);}catch(error){console.warn('[LeaguesService] Backend not available for live matches, showing all leagues');}try{var _upcomingMatchesRespo;console.log('[LeaguesService] Attempting to fetch upcoming matches...');const upcomingMatchesResponse=await axios.get(`${BACKEND_BASE_URL}/matches/upcoming`,{signal,timeout:5000});upcomingMatches=((_upcomingMatchesRespo=upcomingMatchesResponse.data)===null||_upcomingMatchesRespo===void 0?void 0:_upcomingMatchesRespo.result)||[];console.log(`[LeaguesService] Successfully fetched ${upcomingMatches.length} upcoming matches`);}catch(error){console.warn('[LeaguesService] Backend not available for upcoming matches, showing all leagues');}console.log(`[LeaguesService] Using ${liveMatches.length} live matches and ${upcomingMatches.length} upcoming matches for league status`);// Process leagues with enhanced data\nconst enhancedLeagues=leaguesResponse.data.result.map(apiLeague=>{const leagueId=apiLeague.league_key;// Count matches for this league - check multiple possible league ID formats\nconst liveCount=liveMatches.filter(match=>{var _match$league,_match$league2;const matchLeagueId=((_match$league=match.league)===null||_match$league===void 0?void 0:_match$league.id)||((_match$league2=match.league)===null||_match$league2===void 0?void 0:_match$league2.key)||match.league_key||match.league_id;return matchLeagueId===leagueId||matchLeagueId===String(leagueId);}).length;const upcomingCount=upcomingMatches.filter(match=>{var _match$league3,_match$league4;const matchLeagueId=((_match$league3=match.league)===null||_match$league3===void 0?void 0:_match$league3.id)||((_match$league4=match.league)===null||_match$league4===void 0?void 0:_match$league4.key)||match.league_key||match.league_id;return matchLeagueId===leagueId||matchLeagueId===String(leagueId);}).length;// Determine league status\nlet status='finished';if(liveCount>0)status='live';else if(upcomingCount>0)status='upcoming';// Create logo asset\nconst logoAsset=createLogoAsset(apiLeague.league_logo,'high');const league={id:leagueId,name:apiLeague.league_name,country:apiLeague.country_name,logo:logoAsset,season:apiLeague.league_season||new Date().getFullYear(),status,liveMatches:liveCount,upcomingMatches:upcomingCount,finishedMatches:0,// Would need additional API call\nlastUpdated:new Date(),api:'allsports',priority:getPriorityForLeague(apiLeague.league_name,apiLeague.country_name)};// Debug logging for popular leagues\nif(league.priority<=10){console.log(`[LeaguesService] Popular league: ${league.name} (${league.country}) - Live: ${liveCount}, Upcoming: ${upcomingCount}, Status: ${status}`);}return league;});// Apply filters - but show all leagues by default, not just those with matches\nconst filteredLeagues=enhancedLeagues.filter(league=>{// Status filter\nif(filters!==null&&filters!==void 0&&filters.status&&filters.status!=='all'&&league.status!==filters.status){return false;}// Only filter by hasMatches if explicitly requested\nif((filters===null||filters===void 0?void 0:filters.hasMatches)===true&&!league.liveMatches&&!league.upcomingMatches){return false;}// Search filter\nif(filters!==null&&filters!==void 0&&filters.search){const searchLower=filters.search.toLowerCase();return league.name.toLowerCase().includes(searchLower)||league.country.toLowerCase().includes(searchLower);}return true;});console.log(`[LeaguesService] Filtered ${filteredLeagues.length} leagues from ${enhancedLeagues.length} total`);// Sort by priority and status\nconst sortedLeagues=filteredLeagues.sort((a,b)=>{// Live leagues first\nif(a.status==='live'&&b.status!=='live')return-1;if(b.status==='live'&&a.status!=='live')return 1;// Then by priority\nif(a.priority!==b.priority)return(a.priority||999)-(b.priority||999);// Then by match count\nconst aMatches=(a.liveMatches||0)+(a.upcomingMatches||0);const bMatches=(b.liveMatches||0)+(b.upcomingMatches||0);return bMatches-aMatches;});// Cache the result\nleaguesCache[cacheKey]={data:sortedLeagues,timestamp:Date.now()};console.log(`[LeaguesService] Successfully fetched ${sortedLeagues.length} enhanced leagues`);return sortedLeagues;}catch(error){console.error('[LeaguesService] Error fetching enhanced leagues:',error);return[];}};// Helper function to assign priority to popular leagues\nconst getPriorityForLeague=(leagueName,countryName)=>{const name=leagueName.toLowerCase();const country=countryName.toLowerCase();// Top tier leagues\nif(name.includes('premier league')&&country.includes('england'))return 1;if(name.includes('la liga')||name.includes('primera divisiÃ³n'))return 2;if(name.includes('bundesliga')&&country.includes('germany'))return 3;if(name.includes('serie a')&&country.includes('italy'))return 4;if(name.includes('ligue 1')&&country.includes('france'))return 5;// Champions League and Europa League\nif(name.includes('champions league'))return 1;if(name.includes('europa league'))return 6;if(name.includes('conference league'))return 7;// Other major leagues\nif(name.includes('eredivisie'))return 8;if(name.includes('primeira liga'))return 9;if(name.includes('championship')&&country.includes('england'))return 10;// Default priority\nreturn 50;};/**\n * Fetch all live leagues with current matches (legacy function for compatibility)\n */const fetchLiveLeagues=async signal=>{try{const leagues=await fetchEnhancedLeagues({status:'live',hasMatches:true},signal);// Convert to legacy format\nconst leagueMap=new Map();leagues.forEach(league=>{leagueMap.set(league.id,{id:league.id,name:league.name,country:league.country,logo:league.logo.url,matchCount:league.liveMatches||0,isLive:league.status==='live',api:league.api});});// Group leagues by country\nconst countryGroups=new Map();Array.from(leagueMap.values()).forEach(league=>{const country=league.country||'International';if(!countryGroups.has(country)){countryGroups.set(country,[]);}countryGroups.get(country).push(league);});// Convert to grouped format\nconst groupedByCountry=Array.from(countryGroups.entries()).map(_ref=>{let[country,leagues]=_ref;return{country,leagues:leagues.sort((a,b)=>(b.matchCount||0)-(a.matchCount||0)),totalMatches:leagues.reduce((sum,league)=>sum+(league.matchCount||0),0)};}).sort((a,b)=>b.totalMatches-a.totalMatches);return{leagues:Array.from(leagueMap.values()),groupedByCountry,totalLiveMatches:leagues.reduce((sum,league)=>sum+(league.liveMatches||0),0),lastUpdated:new Date().toISOString()};}catch(error){console.error('[LeaguesService] Error fetching live leagues:',error);return null;}};/**\n * Fetch all available leagues (not just live ones)\n */const fetchAllLeagues=async(countryId,signal)=>{try{var _response$data,_response$data2;console.log('[LeaguesService] Fetching all available leagues...');const cacheKey=`all_leagues_${countryId||'all'}`;const cachedData=leaguesCache[cacheKey];if(cachedData&&Date.now()-cachedData.timestamp<CACHE_EXPIRATION){console.log('[LeaguesService] Using cached all leagues data');return cachedData.data;}// Fetch from AllSportsAPI\nconst params={met:'Leagues',APIkey:API_KEY};if(countryId){params.countryId=countryId;}const response=await axios.get(ALLSPORTS_BASE_URL,{params,signal,timeout:15000});if(!((_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.success)||!((_response$data2=response.data)!==null&&_response$data2!==void 0&&_response$data2.result)){console.warn('[LeaguesService] No leagues data available from AllSportsAPI');return[];}const leagues=response.data.result.map(league=>({id:league.league_key,name:league.league_name,country:league.country_name,logo:league.league_logo,season:league.league_season||new Date().getFullYear(),type:'league',isLive:false,api:'allsports'}));// Cache the result\nleaguesCache[cacheKey]={data:leagues,timestamp:Date.now()};console.log(`[LeaguesService] Successfully fetched ${leagues.length} leagues`);return leagues;}catch(error){console.error('[LeaguesService] Error fetching all leagues:',error);return[];}};/**\n * Get league details with current standings\n */const getLeagueDetails=async(leagueId,signal)=>{try{var _response$data3;console.log(`[LeaguesService] Fetching details for league ${leagueId}`);const response=await axios.get(`${BACKEND_BASE_URL}/leagues/${leagueId}/standings`,{signal,timeout:10000});if(!((_response$data3=response.data)!==null&&_response$data3!==void 0&&_response$data3.success)){console.warn(`[LeaguesService] No standings data for league ${leagueId}`);return null;}return response.data.result;}catch(error){console.error(`[LeaguesService] Error fetching league details for ${leagueId}:`,error);return null;}};/**\n * Clear leagues cache\n */const clearLeaguesCache=()=>{Object.keys(leaguesCache).forEach(key=>{delete leaguesCache[key];});console.log('[LeaguesService] Cache cleared');};/**\n * Get countries with leagues\n */const fetchCountries=async signal=>{try{var _response$data4,_response$data5;console.log('[LeaguesService] Fetching countries...');const response=await axios.get(ALLSPORTS_BASE_URL,{params:{met:'Countries',APIkey:API_KEY},signal,timeout:10000});if(!((_response$data4=response.data)!==null&&_response$data4!==void 0&&_response$data4.success)||!((_response$data5=response.data)!==null&&_response$data5!==void 0&&_response$data5.result)){return[];}return response.data.result.map(country=>({id:country.country_key,name:country.country_name,logo:country.country_logo}));}catch(error){console.error('[LeaguesService] Error fetching countries:',error);return[];}};// Export the service\nconst leaguesService={fetchLiveLeagues,fetchAllLeagues,fetchEnhancedLeagues,getLeagueDetails,fetchCountries,clearLeaguesCache,createLogoAsset,optimizeLogo};export default leaguesService;// Named exports for enhanced functionality\nexport{fetchEnhancedLeagues,createLogoAsset,optimizeLogo,getPriorityForLeague};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}