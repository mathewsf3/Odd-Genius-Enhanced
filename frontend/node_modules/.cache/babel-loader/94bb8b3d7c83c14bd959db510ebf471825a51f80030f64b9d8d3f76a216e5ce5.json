{"ast":null,"code":"import axios from 'axios';\nimport soccerApiService from '../api/soccerApiService';\nclass ChatService {\n  constructor() {\n    this.apiKey = void 0;\n    this.baseUrl = void 0;\n    this.apiKey = process.env.REACT_APP_OPENAI_API_KEY || '';\n    this.baseUrl = 'https://api.openai.com/v1/chat/completions';\n  }\n  isValidSoccerQuery(message) {\n    const soccerKeywords = ['soccer', 'football', 'match', 'team', 'league', 'goal', 'score', 'bet', 'odds', 'statistics', 'analysis', 'prediction', 'premier league', 'champions league', 'la liga', 'serie a', 'bundesliga', 'ligue 1', 'mls', 'world cup', 'euro', 'player', 'coach', 'transfer', 'formation', 'tactics', 'expected goals', 'xg', 'xa', 'possession', 'shots', 'corners', 'cards', 'fouls', 'offside', 'penalty', 'free kick', 'striker', 'midfielder', 'defender', 'goalkeeper', 'arsenal', 'manchester', 'liverpool', 'chelsea', 'barcelona', 'real madrid', 'juventus', 'milan', 'bayern', 'psg', 'atletico', 'tottenham', 'city'];\n    const messageLower = message.toLowerCase();\n    return soccerKeywords.some(keyword => messageLower.includes(keyword));\n  }\n  async getRecentMatchData() {\n    try {\n      // Get live and upcoming matches\n      const [liveMatches, upcomingMatches] = await Promise.all([soccerApiService.getLiveMatches().catch(() => []), soccerApiService.getUpcomingMatches().catch(() => [])]);\n\n      // Get next 7 days of matches\n      const now = new Date();\n      const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n      const recentMatches = (upcomingMatches === null || upcomingMatches === void 0 ? void 0 : upcomingMatches.filter(match => {\n        var _match$fixture;\n        const matchDate = new Date(((_match$fixture = match.fixture) === null || _match$fixture === void 0 ? void 0 : _match$fixture.date) || match.date);\n        return matchDate >= now && matchDate <= nextWeek;\n      }).slice(0, 20)) || [];\n      return {\n        liveMatches: (liveMatches === null || liveMatches === void 0 ? void 0 : liveMatches.slice(0, 10)) || [],\n        upcomingMatches: recentMatches,\n        totalLive: (liveMatches === null || liveMatches === void 0 ? void 0 : liveMatches.length) || 0,\n        totalUpcoming: recentMatches.length\n      };\n    } catch (error) {\n      console.error('Error fetching match data:', error);\n      return {\n        liveMatches: [],\n        upcomingMatches: [],\n        totalLive: 0,\n        totalUpcoming: 0\n      };\n    }\n  }\n  async getLeagueData() {\n    try {\n      // Get popular leagues data if available\n      const leagues = ['Premier League', 'Champions League', 'La Liga', 'Serie A', 'Bundesliga', 'Ligue 1'];\n      return {\n        availableLeagues: leagues,\n        note: \"I can provide analysis for major European leagues and competitions\"\n      };\n    } catch (error) {\n      console.error('Error fetching league data:', error);\n      return {\n        availableLeagues: [],\n        note: \"League data temporarily unavailable\"\n      };\n    }\n  }\n  createSystemPrompt(matchData, leagueData) {\n    return `You are Odd Genius AI, a specialized soccer analytics assistant. You help users with:\n\n1. **Upcoming Match Analysis** (Next 7 days):\n   - Currently tracking ${matchData.totalUpcoming} upcoming matches\n   - ${matchData.totalLive} live matches in progress\n   - Focus on matches with good betting value and statistical insights\n\n2. **League & Competition Insights**:\n   - Available leagues: ${leagueData.availableLeagues.join(', ')}\n   - Statistical analysis and trends\n   - Team form and performance metrics\n\n3. **Betting & Analytics**:\n   - Expected Goals (xG) analysis\n   - Value betting opportunities\n   - Statistical predictions\n   - Risk assessment\n\n4. **Key Capabilities**:\n   - Match predictions based on data\n   - Team performance analysis\n   - Historical head-to-head insights\n   - Injury impact assessment\n   - Formation and tactical analysis\n\n**IMPORTANT RESTRICTIONS**:\n- ONLY discuss soccer/football topics\n- If asked about other sports or non-soccer topics, politely redirect to soccer\n- Provide data-driven insights when possible\n- Always mention when recommendations are based on analysis vs live data\n- Be helpful but remind users that betting involves risk\n\n**Current Data Context**:\n${matchData.upcomingMatches.length > 0 ? `Recent upcoming matches include teams like: ${matchData.upcomingMatches.slice(0, 5).map(m => {\n      var _m$teams, _m$teams$home, _m$homeTeam, _m$teams2, _m$teams2$away, _m$awayTeam;\n      return `${((_m$teams = m.teams) === null || _m$teams === void 0 ? void 0 : (_m$teams$home = _m$teams.home) === null || _m$teams$home === void 0 ? void 0 : _m$teams$home.name) || ((_m$homeTeam = m.homeTeam) === null || _m$homeTeam === void 0 ? void 0 : _m$homeTeam.name)} vs ${((_m$teams2 = m.teams) === null || _m$teams2 === void 0 ? void 0 : (_m$teams2$away = _m$teams2.away) === null || _m$teams2$away === void 0 ? void 0 : _m$teams2$away.name) || ((_m$awayTeam = m.awayTeam) === null || _m$awayTeam === void 0 ? void 0 : _m$awayTeam.name)}`;\n    }).join(', ')}` : 'Match data is being updated'}\n\nRespond conversationally but focus on actionable soccer insights.`;\n  }\n  async sendMessage(message) {\n    try {\n      var _response$data, _response$data$choice, _response$data$choice2, _response$data$choice3;\n      // Validate if the query is soccer-related\n      if (!this.isValidSoccerQuery(message)) {\n        return \"I'm your soccer analytics assistant! I can only help with soccer-related questions like match predictions, team analysis, betting insights, league statistics, and player performance. What would you like to know about soccer?\";\n      }\n\n      // Check if API key is available\n      if (!this.apiKey) {\n        return \"I'm currently experiencing technical difficulties connecting to my analysis engine. Please try asking about specific teams, leagues, or matches and I'll do my best to help with the information I have available.\";\n      }\n\n      // Get recent soccer data\n      const [matchData, leagueData] = await Promise.all([this.getRecentMatchData(), this.getLeagueData()]);\n\n      // Create system prompt with current data\n      const systemPrompt = this.createSystemPrompt(matchData, leagueData);\n\n      // Call OpenAI API\n      const response = await axios.post(this.baseUrl, {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: systemPrompt\n        }, {\n          role: 'user',\n          content: message\n        }],\n        max_tokens: 500,\n        temperature: 0.7\n      }, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        timeout: 10000\n      });\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$choice = _response$data.choices) !== null && _response$data$choice !== void 0 && (_response$data$choice2 = _response$data$choice[0]) !== null && _response$data$choice2 !== void 0 && (_response$data$choice3 = _response$data$choice2.message) !== null && _response$data$choice3 !== void 0 && _response$data$choice3.content) {\n        return response.data.choices[0].message.content.trim();\n      }\n      throw new Error('Invalid response from AI service');\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Chat service error:', error);\n\n      // Handle specific error cases\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        return \"I'm having trouble accessing my analysis engine. Please try asking about specific soccer topics like team performance, upcoming matches, or league statistics, and I'll help with the information available.\";\n      }\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 429) {\n        return \"I'm currently handling a lot of requests. Please wait a moment and try again. In the meantime, feel free to ask about specific teams or matches!\";\n      }\n      if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n        return \"My response is taking longer than usual. Could you try rephrasing your question about soccer analytics or asking about a specific team or league?\";\n      }\n\n      // Provide helpful fallback responses for common soccer queries\n      const messageLower = message.toLowerCase();\n      if (messageLower.includes('upcoming') || messageLower.includes('today') || messageLower.includes('tomorrow')) {\n        return \"I can help analyze upcoming matches! While I'm experiencing some technical issues with live data, you can ask me about specific teams, leagues, or what to look for in match analysis like expected goals, team form, and head-to-head records.\";\n      }\n      if (messageLower.includes('bet') || messageLower.includes('odds') || messageLower.includes('prediction')) {\n        return \"For betting insights, I typically analyze factors like team form, expected goals (xG), head-to-head records, and injury reports. While my live data connection is having issues, I can discuss general betting strategies and what statistics to consider when analyzing matches.\";\n      }\n      if (messageLower.includes('league') || messageLower.includes('premier') || messageLower.includes('champions')) {\n        return \"I can discuss league analysis including team performance trends, statistical comparisons, and tactical insights. Which specific league or teams are you interested in analyzing?\";\n      }\n      return \"I'm experiencing some technical difficulties, but I'm still here to help with soccer analysis! Try asking about specific teams, leagues, betting strategies, or what statistics to look for in match analysis.\";\n    }\n  }\n}\nexport const chatService = new ChatService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}