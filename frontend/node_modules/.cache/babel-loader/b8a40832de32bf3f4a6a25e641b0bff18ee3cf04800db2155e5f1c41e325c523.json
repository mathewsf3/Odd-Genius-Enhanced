{"ast":null,"code":"import axios from'axios';import{API_KEY}from'../config/api-config';// Base URL for the API\nconst BASE_URL='https://apiv2.allsportsapi.com/football';// Helper functions for date formatting\nconst getCurrentDate=()=>{const date=new Date();return date.toISOString().split('T')[0];};const getDateRange=daysToLookBack=>{const date=new Date();date.setDate(date.getDate()-daysToLookBack);return date.toISOString().split('T')[0];};// Cache for BTTS stats data to reduce API calls\nconst bttsStatsCache={};// Clear cache function\nconst clearBTTSStatsCache=()=>{Object.keys(bttsStatsCache).forEach(key=>{delete bttsStatsCache[key];});console.log('[BTTSStatsService] Cache cleared');};// Main function to fetch BTTS statistics\nconst fetchBTTSStats=async function(homeTeamId,awayTeamId){let gameCount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;try{// Clean team IDs (remove \"team-\" prefix if present)\nconst cleanHomeTeamId=homeTeamId.toString().replace('team-','');const cleanAwayTeamId=awayTeamId.toString().replace('team-','');// Create a cache key based on team IDs and game count\nconst cacheKey=`${cleanHomeTeamId}-${cleanAwayTeamId}-${gameCount}`;// Check if we have cached data that's less than 1 hour old\nconst cachedData=bttsStatsCache[cacheKey];if(cachedData&&Date.now()-cachedData.timestamp<3600000){console.log(`[BTTSStatsService] Using cached BTTS stats data for ${cacheKey}`);return cachedData.data;}console.log(`[BTTSStatsService] Fetching BTTS stats for ${cleanHomeTeamId} vs ${cleanAwayTeamId} with ${gameCount} games`);// Create an abort controller for timeout handling\nconst abortController=new AbortController();const timeoutId=setTimeout(()=>abortController.abort(),15000);// Fetch team matches for both teams\nconst[homeTeamMatches,awayTeamMatches,h2hMatches]=await Promise.all([fetchTeamMatches(cleanHomeTeamId,gameCount,abortController.signal),fetchTeamMatches(cleanAwayTeamId,gameCount,abortController.signal),fetchH2HMatches(cleanHomeTeamId,cleanAwayTeamId,gameCount,abortController.signal)]);clearTimeout(timeoutId);console.log(`[BTTSStatsService] Retrieved ${homeTeamMatches.length} home team matches, ${awayTeamMatches.length} away team matches, and ${h2hMatches.length} H2H matches`);// Process matches to extract BTTS statistics\nconst homeTeamStats=await processTeamBTTSStats(cleanHomeTeamId,homeTeamMatches);const awayTeamStats=await processTeamBTTSStats(cleanAwayTeamId,awayTeamMatches);const h2hStats=processH2HBTTSStats(cleanHomeTeamId,cleanAwayTeamId,h2hMatches);// Calculate combined statistics\nconst combinedStats=calculateCombinedBTTSStats(homeTeamStats,awayTeamStats,h2hStats);// Create the result object\nconst result={homeStats:homeTeamStats,awayStats:awayTeamStats,h2hStats,combinedStats,isFallbackData:false};// Cache the result\nbttsStatsCache[cacheKey]={data:result,timestamp:Date.now()};return result;}catch(error){console.error('[BTTSStatsService] Error fetching BTTS statistics:',error);throw new Error(`Failed to fetch BTTS statistics: ${error instanceof Error?error.message:'Unknown error'}`);}};// Fetch team matches from the API\nconst fetchTeamMatches=async(teamId,count,signal)=>{try{console.log(`[BTTSStatsService] Fetching matches for team ${teamId}`);// Get a slightly wider date range to ensure we get enough matches\nconst daysToLookBack=count<=5?90:count<=10?180:365;// Use direct URL construction to avoid any potential issues with axios params\nconst url=`${BASE_URL}/?met=Fixtures&teamId=${teamId}&from=${getDateRange(daysToLookBack)}&to=${getCurrentDate()}&APIkey=${API_KEY}`;console.log(`[BTTSStatsService] Making API request to: ${url.replace(API_KEY,'API_KEY_HIDDEN')}`);const response=await axios.get(url,{signal,timeout:8000,decompress:true});// Extract match data and return most recent 'count' matches\nconst matches=response.data.result||[];console.log(`[BTTSStatsService] API response for team ${teamId}: Found ${matches.length} matches`);if(matches.length===0){console.warn(`[BTTSStatsService] No matches found for team ID ${teamId}`);throw new Error(`No matches found for team ID ${teamId}`);}return matches.sort((a,b)=>new Date(b.event_date).getTime()-new Date(a.event_date).getTime()).slice(0,count).map(match=>{var _match$home_team,_match$away_team,_match$home_team2;return{id:match.event_key,date:match.event_date,homeTeamId:match.home_team_key||((_match$home_team=match.home_team)===null||_match$home_team===void 0?void 0:_match$home_team.team_key),homeTeamName:match.event_home_team,awayTeamId:match.away_team_key||((_match$away_team=match.away_team)===null||_match$away_team===void 0?void 0:_match$away_team.team_key),awayTeamName:match.event_away_team,homeScore:parseInt(match.event_final_result.split(' - ')[0]),awayScore:parseInt(match.event_final_result.split(' - ')[1]),isHome:(match.home_team_key||((_match$home_team2=match.home_team)===null||_match$home_team2===void 0?void 0:_match$home_team2.team_key))===teamId,league:match.league_name,country:match.country_name};});}catch(error){console.error(`[BTTSStatsService] Error fetching team matches for team ${teamId}:`,error);throw new Error(`Failed to fetch matches for team ${teamId}: ${error instanceof Error?error.message:'Unknown error'}`);}};// Fetch head-to-head matches from the API\nconst fetchH2HMatches=async(homeTeamId,awayTeamId,count,signal)=>{try{var _response$data$result;console.log(`[BTTSStatsService] Fetching H2H matches for teams ${homeTeamId} vs ${awayTeamId}`);// Use direct URL construction\nconst url=`${BASE_URL}/?met=H2H&firstTeamId=${homeTeamId}&secondTeamId=${awayTeamId}&APIkey=${API_KEY}`;console.log(`[BTTSStatsService] Making API request to: ${url.replace(API_KEY,'API_KEY_HIDDEN')}`);const response=await axios.get(url,{signal,timeout:8000,decompress:true});// Extract H2H matches\nconst h2hData=((_response$data$result=response.data.result)===null||_response$data$result===void 0?void 0:_response$data$result.H2H)||[];console.log(`[BTTSStatsService] API response: Found ${h2hData.length} H2H matches`);if(h2hData.length===0){console.warn(`[BTTSStatsService] No H2H matches found for teams ${homeTeamId} vs ${awayTeamId}`);return[];}return h2hData.sort((a,b)=>new Date(b.event_date).getTime()-new Date(a.event_date).getTime()).slice(0,count).map(match=>({id:match.event_key,date:match.event_date,homeTeamId:match.home_team_key,homeTeamName:match.event_home_team,awayTeamId:match.away_team_key,awayTeamName:match.event_away_team,homeScore:parseInt(match.event_final_result.split(' - ')[0]),awayScore:parseInt(match.event_final_result.split(' - ')[1]),league:match.league_name,country:match.country_name}));}catch(error){console.error(`[BTTSStatsService] Error fetching H2H matches:`,error);return[];// Return empty array instead of throwing to allow the rest of the data to be processed\n}};// Process team matches to extract BTTS statistics\nconst processTeamBTTSStats=async(teamId,matches)=>{console.log(`[BTTSStatsService] Processing ${matches.length} matches for team ${teamId}`);// Initialize counters\nlet totalMatches=matches.length;let bttsYesCount=0;let cleanSheetCount=0;let failedToScoreCount=0;// Home/Away specific counters\nlet homeMatches=0;let homeBttsYesCount=0;let homeCleanSheetCount=0;let homeFailedToScoreCount=0;let awayMatches=0;let awayBttsYesCount=0;let awayCleanSheetCount=0;let awayFailedToScoreCount=0;// Recent form tracking\nconst recentForm=[];// Process each match\nfor(const match of matches){// Determine if this is a home or away match for the team we're analyzing\nconst isHome=match.homeTeamId===teamId;// Calculate goals scored and conceded based on whether this is a home or away match\nconst goalsScored=isHome?match.homeScore:match.awayScore;const goalsConceded=isHome?match.awayScore:match.homeScore;// Get the opponent name, making sure it's not the same as the team we're analyzing\nconst opponent=isHome?match.awayTeamName:match.homeTeamName;// Debug log to verify correct data\nconsole.log(`[BTTSStatsService] Processing match for team ${teamId}: ${isHome?'Home':'Away'} vs ${opponent}, Score: ${goalsScored}-${goalsConceded}`);// Check BTTS\nconst bttsResult=goalsScored>0&&goalsConceded>0?'Yes':'No';if(bttsResult==='Yes')bttsYesCount++;// Check clean sheet\nconst cleanSheet=goalsConceded===0;if(cleanSheet)cleanSheetCount++;// Check failed to score\nconst failedToScore=goalsScored===0;if(failedToScore)failedToScoreCount++;// Track home/away stats\nif(isHome){homeMatches++;if(bttsResult==='Yes')homeBttsYesCount++;if(cleanSheet)homeCleanSheetCount++;if(failedToScore)homeFailedToScoreCount++;}else{awayMatches++;if(bttsResult==='Yes')awayBttsYesCount++;if(cleanSheet)awayCleanSheetCount++;if(failedToScore)awayFailedToScoreCount++;}// Add to recent form\nrecentForm.push({matchId:match.id,date:match.date,opponent,isHome,goalsScored,goalsConceded,bttsResult,cleanSheet,failedToScore});}// Calculate percentages\nconst bttsYesPercentage=totalMatches>0?Math.round(bttsYesCount/totalMatches*100):0;const cleanSheetPercentage=totalMatches>0?Math.round(cleanSheetCount/totalMatches*100):0;const failedToScorePercentage=totalMatches>0?Math.round(failedToScoreCount/totalMatches*100):0;const homeBttsYesPercentage=homeMatches>0?Math.round(homeBttsYesCount/homeMatches*100):0;const homeCleanSheetPercentage=homeMatches>0?Math.round(homeCleanSheetCount/homeMatches*100):0;const homeFailedToScorePercentage=homeMatches>0?Math.round(homeFailedToScoreCount/homeMatches*100):0;const awayBttsYesPercentage=awayMatches>0?Math.round(awayBttsYesCount/awayMatches*100):0;const awayCleanSheetPercentage=awayMatches>0?Math.round(awayCleanSheetCount/awayMatches*100):0;const awayFailedToScorePercentage=awayMatches>0?Math.round(awayFailedToScoreCount/awayMatches*100):0;// Log detailed statistics for verification\nconsole.log(`[BTTSStatsService] Team ${teamId} BTTS statistics summary:`);console.log(`[BTTSStatsService] - Total matches: ${totalMatches}`);console.log(`[BTTSStatsService] - BTTS Yes: ${bttsYesCount} (${bttsYesPercentage}%)`);console.log(`[BTTSStatsService] - Clean sheets: ${cleanSheetCount} (${cleanSheetPercentage}%)`);console.log(`[BTTSStatsService] - Failed to score: ${failedToScoreCount} (${failedToScorePercentage}%)`);return{teamId,totalMatches,bttsYesCount,bttsYesPercentage,cleanSheetCount,cleanSheetPercentage,failedToScoreCount,failedToScorePercentage,homeMatches,homeBttsYesCount,homeBttsYesPercentage,homeCleanSheetCount,homeCleanSheetPercentage,homeFailedToScoreCount,homeFailedToScorePercentage,awayMatches,awayBttsYesCount,awayBttsYesPercentage,awayCleanSheetCount,awayCleanSheetPercentage,awayFailedToScoreCount,awayFailedToScorePercentage,recentForm};};// Process H2H matches to extract BTTS statistics\nconst processH2HBTTSStats=(homeTeamId,_awayTeamId,matches)=>{// Note: awayTeamId is prefixed with underscore to indicate it's not used directly\nconsole.log(`[BTTSStatsService] Processing ${matches.length} H2H matches`);// Initialize counters\nconst totalMatches=matches.length;let bttsYesCount=0;let homeTeamWins=0;let awayTeamWins=0;let draws=0;let homeTeamGoals=0;let awayTeamGoals=0;// Recent form tracking\nconst recentH2HForm=[];// Process each match\nfor(const match of matches){const homeScore=match.homeScore;const awayScore=match.awayScore;// Check BTTS\nconst bttsResult=homeScore>0&&awayScore>0?'Yes':'No';if(bttsResult==='Yes')bttsYesCount++;// Track match result\nif(homeScore>awayScore){if(match.homeTeamId===homeTeamId){homeTeamWins++;}else{awayTeamWins++;}}else if(homeScore<awayScore){if(match.homeTeamId===homeTeamId){awayTeamWins++;}else{homeTeamWins++;}}else{draws++;}// Track goals\nif(match.homeTeamId===homeTeamId){homeTeamGoals+=homeScore;awayTeamGoals+=awayScore;}else{homeTeamGoals+=awayScore;awayTeamGoals+=homeScore;}// Add to recent form\nconst isHomeTeamHome=match.homeTeamId===homeTeamId;const homeTeamName=match.homeTeamName||\"Home Team\";const awayTeamName=match.awayTeamName||\"Away Team\";// Create a descriptive match string that clearly shows home vs away\nconst matchDescription=`${homeTeamName} ${homeScore}-${awayScore} ${awayTeamName}`;recentH2HForm.push({matchId:match.id,date:match.date,opponent:matchDescription,isHome:isHomeTeamHome,goalsScored:isHomeTeamHome?homeScore:awayScore,goalsConceded:isHomeTeamHome?awayScore:homeScore,bttsResult,cleanSheet:isHomeTeamHome?awayScore===0:homeScore===0,failedToScore:isHomeTeamHome?homeScore===0:awayScore===0});}// Calculate percentages and averages\nconst bttsYesPercentage=totalMatches>0?Math.round(bttsYesCount/totalMatches*100):0;const averageTotalGoals=totalMatches>0?Math.round((homeTeamGoals+awayTeamGoals)/totalMatches*10)/10:0;// Log detailed statistics for verification\nconsole.log(`[BTTSStatsService] H2H BTTS statistics summary:`);console.log(`[BTTSStatsService] - Total matches: ${totalMatches}`);console.log(`[BTTSStatsService] - BTTS Yes: ${bttsYesCount} (${bttsYesPercentage}%)`);console.log(`[BTTSStatsService] - Home team wins: ${homeTeamWins}, Away team wins: ${awayTeamWins}, Draws: ${draws}`);console.log(`[BTTSStatsService] - Average total goals: ${averageTotalGoals}`);return{totalMatches,bttsYesCount,bttsYesPercentage,homeTeamWins,awayTeamWins,draws,homeTeamGoals,awayTeamGoals,averageTotalGoals,recentH2HForm};};// Calculate combined BTTS statistics\nconst calculateCombinedBTTSStats=(homeTeamStats,awayTeamStats,h2hStats)=>{// Calculate BTTS probability based on visible matches\nconst visibleMatches=Math.min(homeTeamStats.recentForm.length,5);// Only use what's visible in UI\n// Recalculate BTTS percentages based on visible matches\nconst homeVisibleBTTS=homeTeamStats.recentForm.slice(0,visibleMatches).filter(match=>match.bttsResult==='Yes').length;const awayVisibleBTTS=awayTeamStats.recentForm.slice(0,visibleMatches).filter(match=>match.bttsResult==='Yes').length;// Calculate percentages based on visible matches\nconst homeVisibleBTTSPercentage=Math.round(homeVisibleBTTS/visibleMatches*100);const awayVisibleBTTSPercentage=Math.round(awayVisibleBTTS/visibleMatches*100);// Update the stats objects to reflect the recalculated values\nhomeTeamStats.bttsYesPercentage=homeVisibleBTTSPercentage;homeTeamStats.bttsYesCount=homeVisibleBTTS;awayTeamStats.bttsYesPercentage=awayVisibleBTTSPercentage;awayTeamStats.bttsYesCount=awayVisibleBTTS;// Recalculate H2H BTTS if available\nlet h2hVisibleBTTSPercentage=0;if(h2hStats.totalMatches>0){const h2hVisibleBTTS=h2hStats.recentH2HForm.slice(0,visibleMatches).filter(match=>match.bttsResult==='Yes').length;h2hVisibleBTTSPercentage=Math.round(h2hVisibleBTTS/Math.min(h2hStats.recentH2HForm.length,visibleMatches)*100);h2hStats.bttsYesPercentage=h2hVisibleBTTSPercentage;h2hStats.bttsYesCount=h2hVisibleBTTS;}console.log(`[BTTSStatsService] Recalculated BTTS stats based on ${visibleMatches} visible matches:`);console.log(`Home team BTTS: ${homeVisibleBTTS}/${visibleMatches} (${homeVisibleBTTSPercentage}%)`);console.log(`Away team BTTS: ${awayVisibleBTTS}/${visibleMatches} (${awayVisibleBTTSPercentage}%)`);if(h2hStats.totalMatches>0){console.log(`H2H BTTS: ${h2hStats.bttsYesCount}/${Math.min(h2hStats.recentH2HForm.length,visibleMatches)} (${h2hVisibleBTTSPercentage}%)`);}// Calculate BTTS probability based on weighted average\n// 40% weight to home team's BTTS rate\n// 40% weight to away team's BTTS rate\n// 20% weight to H2H BTTS rate (if available)\nlet bttsYesProbability=0;if(h2hStats.totalMatches>0){bttsYesProbability=Math.round(homeVisibleBTTSPercentage*0.4+awayVisibleBTTSPercentage*0.4+h2hVisibleBTTSPercentage*0.2);}else{bttsYesProbability=Math.round(homeVisibleBTTSPercentage*0.5+awayVisibleBTTSPercentage*0.5);}// Determine confidence level based on probability ranges\n// Low: 40-60%, Medium: 30-40%/60-70%, High: <30%/>70%\nlet confidenceLevel;if(bttsYesProbability>=40&&bttsYesProbability<=60){confidenceLevel='Low';}else if(bttsYesProbability>=30&&bttsYesProbability<40||bttsYesProbability>60&&bttsYesProbability<=70){confidenceLevel='Medium';}else if(bttsYesProbability>=20&&bttsYesProbability<30||bttsYesProbability>70&&bttsYesProbability<=80){confidenceLevel='High';}else{confidenceLevel='Very High';}console.log(`[BTTSStatsService] BTTS Probability: ${bttsYesProbability}%, Confidence Level: ${confidenceLevel}`);// Determine prediction based on probability thresholds\n// OVER for >55%, UNDER for <45%, and PUSH for 45-55%\nlet prediction;// Round to nearest whole number to avoid floating point issues\nconst roundedProbability=Math.round(bttsYesProbability);if(roundedProbability>55){prediction='Yes';}else if(roundedProbability<45){prediction='No';}else{prediction='Uncertain';}console.log(`[BTTSStatsService] BTTS Prediction: ${prediction} (${bttsYesProbability}%)`);// For 50% probability, always use 'Uncertain' prediction\nif(roundedProbability===50){prediction='Uncertain';console.log(`[BTTSStatsService] Corrected to PUSH for 50% probability`);}// Make historical percentages 4-5% higher than prediction percentages\n// This is just for display purposes to match the user's requirements\nif(prediction==='Yes'&&bttsYesProbability<65){bttsYesProbability=Math.min(bttsYesProbability+4,100);}else if(prediction==='No'&&100-bttsYesProbability<65){bttsYesProbability=Math.max(bttsYesProbability-4,0);}// Calculate average goals based on visible matches only\nlet averageHomeTeamGoals=0;let averageAwayTeamGoals=0;let averageTotalGoals=0;// Use the same visibleMatches value we defined earlier\nconst visibleHomeGoals=homeTeamStats.recentForm.slice(0,visibleMatches).reduce((sum,match)=>sum+match.goalsScored,0);const visibleAwayGoals=awayTeamStats.recentForm.slice(0,visibleMatches).reduce((sum,match)=>sum+match.goalsScored,0);if(h2hStats.totalMatches>0){// Use visible H2H data for more accurate predictions\nconst visibleH2HMatches=h2hStats.recentH2HForm.slice(0,visibleMatches);const h2hHomeGoals=visibleH2HMatches.reduce((sum,match)=>sum+(match.isHome?match.goalsScored:match.goalsConceded),0);const h2hAwayGoals=visibleH2HMatches.reduce((sum,match)=>sum+(match.isHome?match.goalsConceded:match.goalsScored),0);const h2hTotalGoals=visibleH2HMatches.reduce((sum,match)=>sum+match.goalsScored+match.goalsConceded,0);averageHomeTeamGoals=Math.round(h2hHomeGoals/visibleH2HMatches.length*10)/10;averageAwayTeamGoals=Math.round(h2hAwayGoals/visibleH2HMatches.length*10)/10;averageTotalGoals=Math.round(h2hTotalGoals/visibleH2HMatches.length*10)/10;// Update the H2H stats object\nh2hStats.homeTeamGoals=h2hHomeGoals;h2hStats.awayTeamGoals=h2hAwayGoals;h2hStats.averageTotalGoals=averageTotalGoals;console.log(`[BTTSStatsService] Using visible H2H data for goal averages: Home=${averageHomeTeamGoals.toFixed(1)}, Away=${averageAwayTeamGoals.toFixed(1)}, Total=${averageTotalGoals.toFixed(1)}`);}else{// Fall back to individual team stats if no H2H data\naverageHomeTeamGoals=Math.round(visibleHomeGoals/visibleMatches*10)/10;averageAwayTeamGoals=Math.round(visibleAwayGoals/visibleMatches*10)/10;averageTotalGoals=Math.round((averageHomeTeamGoals+averageAwayTeamGoals)*10)/10;console.log(`[BTTSStatsService] Using visible team stats for goal averages: Home=${averageHomeTeamGoals.toFixed(1)}, Away=${averageAwayTeamGoals.toFixed(1)}, Total=${averageTotalGoals.toFixed(1)}`);}// Round to 1 decimal place for consistency\naverageHomeTeamGoals=Math.round(averageHomeTeamGoals*10)/10;averageAwayTeamGoals=Math.round(averageAwayTeamGoals*10)/10;averageTotalGoals=Math.round(averageTotalGoals*10)/10;// Calculate clean sheet probabilities - use visible matches only for consistency\n// We're already using visibleMatches from earlier in the code\n// Recalculate clean sheet percentages based on visible matches\nconst homeVisibleCleanSheets=homeTeamStats.recentForm.slice(0,visibleMatches).filter(match=>match.goalsConceded===0).length;const awayVisibleCleanSheets=awayTeamStats.recentForm.slice(0,visibleMatches).filter(match=>match.goalsConceded===0).length;// Recalculate failed to score percentages based on visible matches\nconst homeVisibleFailedToScore=homeTeamStats.recentForm.slice(0,visibleMatches).filter(match=>match.goalsScored===0).length;const awayVisibleFailedToScore=awayTeamStats.recentForm.slice(0,visibleMatches).filter(match=>match.goalsScored===0).length;// Calculate percentages based on visible matches\nconst homeTeamCleanSheetProbability=Math.round(homeVisibleCleanSheets/visibleMatches*100);const awayTeamCleanSheetProbability=Math.round(awayVisibleCleanSheets/visibleMatches*100);const homeTeamFailToScoreProbability=Math.round(homeVisibleFailedToScore/visibleMatches*100);const awayTeamFailToScoreProbability=Math.round(awayVisibleFailedToScore/visibleMatches*100);console.log(`[BTTSStatsService] Recalculated stats based on ${visibleMatches} visible matches:`);console.log(`Home team clean sheets: ${homeVisibleCleanSheets}/${visibleMatches} (${homeTeamCleanSheetProbability}%)`);console.log(`Away team clean sheets: ${awayVisibleCleanSheets}/${visibleMatches} (${awayTeamCleanSheetProbability}%)`);console.log(`Home team failed to score: ${homeVisibleFailedToScore}/${visibleMatches} (${homeTeamFailToScoreProbability}%)`);console.log(`Away team failed to score: ${awayVisibleFailedToScore}/${visibleMatches} (${awayTeamFailToScoreProbability}%)`);// Update the stats objects to reflect the recalculated values\nhomeTeamStats.cleanSheetPercentage=homeTeamCleanSheetProbability;homeTeamStats.cleanSheetCount=homeVisibleCleanSheets;homeTeamStats.failedToScorePercentage=homeTeamFailToScoreProbability;homeTeamStats.failedToScoreCount=homeVisibleFailedToScore;awayTeamStats.cleanSheetPercentage=awayTeamCleanSheetProbability;awayTeamStats.cleanSheetCount=awayVisibleCleanSheets;awayTeamStats.failedToScorePercentage=awayTeamFailToScoreProbability;awayTeamStats.failedToScoreCount=awayVisibleFailedToScore;return{bttsYesProbability,confidenceLevel,prediction,averageHomeTeamGoals,averageAwayTeamGoals,averageTotalGoals,homeTeamCleanSheetProbability,awayTeamCleanSheetProbability,homeTeamFailToScoreProbability,awayTeamFailToScoreProbability};};export default{fetchBTTSStats,clearBTTSStatsCache};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}