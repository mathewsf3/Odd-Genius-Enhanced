{"ast":null,"code":"// @ts-nocheck\nimport React,{useState,useEffect}from'react';import{useParams}from'react-router-dom';import{Box,Container,useColorModeValue,Tabs,TabList,TabPanels,Tab,TabPanel,Flex,Badge,Tooltip,Button,Alert,AlertIcon,AlertTitle,AlertDescription}from'@chakra-ui/react';import Loader from'../components/common/Loader';import axios from'axios';// Component imports\nimport CustomHeadToHeadTab from'../components/match/CustomHeadToHeadTab';import CornerTabCustom from'../components/match/CornerTabCustom';import CustomCardsTab from'../components/match/CustomCardsTab';import CustomBTTSTab from'../components/match/CustomBTTSTab';import CustomPlayerStatsTab from'../components/match/CustomPlayerStatsTab';import CustomLeagueTab from'../components/match/CustomLeagueTab';import MatchHeader from'../components/match/MatchHeader';// Import services\nimport cornerStatsService from'../services/cornerStatsService';import cardStatsService from'../services/cardStatsService';import bttsStatsService from'../services/bttsStatsService';import playerStatsService from'../services/playerStatsService';import leagueService from'../services/leagueService';import teamFormService from'../services/teamFormService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Initial match data structure - will be populated with real data from API\nconst INITIAL_MATCH_DATA={id:'',homeTeam:{id:'',name:'',logo:''},awayTeam:{id:'',name:'',logo:''},league:{id:'',name:'',country:'',logo:''},date:'',time:'',startTime:'',status:'',venue:'',odds:{home:0,draw:0,away:0},probability:{home:'0%',draw:'0%',away:'0%'},score:{home:0,away:0}};const SpecialMatch=_ref=>{let{matchId:propMatchId}=_ref;const params=useParams();const matchId=propMatchId||params.id||'1530359';const[isLoading,setIsLoading]=useState(true);const[error,setError]=useState(null);const[h2hData,setH2hData]=useState(null);const[cornerStatsData,setCornerStatsData]=useState(null);const[cardStatsData,setCardStatsData]=useState(null);const[bttsStatsData,setBttsStatsData]=useState(null);const[playerStatsData,setPlayerStatsData]=useState(null);const[leagueStandingsData,setLeagueStandingsData]=useState(null);const[homeTeamForm,setHomeTeamForm]=useState(null);const[awayTeamForm,setAwayTeamForm]=useState(null);const[tabIndex,setTabIndex]=useState(0);const[gameCount,setGameCount]=useState(10);const[matchData,setMatchData]=useState(INITIAL_MATCH_DATA);const[dataSource,setDataSource]=useState('Unknown');const bgColor=useColorModeValue('white','gray.800');// Enhanced match data fetching with better unified system support\nconst fetchMatchData=async id=>{try{var _response$data;setIsLoading(true);setError(null);console.log(`🔍 [SpecialMatch] Fetching match data for ID: ${id}`);// Clear all existing data\nsetH2hData(null);setCornerStatsData(null);setCardStatsData(null);setBttsStatsData(null);setPlayerStatsData(null);setLeagueStandingsData(null);setHomeTeamForm(null);setAwayTeamForm(null);// Try standard endpoint first, then fallback to live/upcoming if team data is missing\nconsole.log('🔍 Using standard match endpoint');let response=await axios.get(`http://localhost:5000/api/matches/${id}`,{timeout:15000});let result=(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.result;let needsFallback=false;// Check if we got valid team data\nif(response.data&&response.data.success&&result){var _result$homeTeam,_result$awayTeam;// Check if team data is missing or incomplete\nconst hasValidTeamData=(((_result$homeTeam=result.homeTeam)===null||_result$homeTeam===void 0?void 0:_result$homeTeam.name)||result.event_home_team)&&(((_result$awayTeam=result.awayTeam)===null||_result$awayTeam===void 0?void 0:_result$awayTeam.name)||result.event_away_team);if(!hasValidTeamData){console.log('⚠️ Main endpoint returned incomplete team data, trying fallback endpoints');needsFallback=true;}}else{needsFallback=true;}// Try fallback endpoints if needed\nif(needsFallback){console.log('🔍 Trying live matches endpoint as fallback');try{var _liveResponse$data;const liveResponse=await axios.get('http://localhost:5000/api/matches/live',{timeout:10000});if((_liveResponse$data=liveResponse.data)!==null&&_liveResponse$data!==void 0&&_liveResponse$data.success&&liveResponse.data.result){const liveMatches=liveResponse.data.result;const targetMatch=liveMatches.find(m=>m.id===id);if(targetMatch){console.log('✅ Found match in live matches');result=targetMatch;needsFallback=false;}}}catch(liveError){console.warn('Live matches fallback failed:',liveError);}// If still no data, try upcoming matches\nif(needsFallback){console.log('🔍 Trying upcoming matches endpoint as fallback');try{var _upcomingResponse$dat;const upcomingResponse=await axios.get('http://localhost:5000/api/matches/upcoming',{timeout:10000});if((_upcomingResponse$dat=upcomingResponse.data)!==null&&_upcomingResponse$dat!==void 0&&_upcomingResponse$dat.success&&upcomingResponse.data.result){const upcomingMatches=upcomingResponse.data.result;const targetMatch=upcomingMatches.find(m=>m.id===id);if(targetMatch){console.log('✅ Found match in upcoming matches');result=targetMatch;needsFallback=false;}}}catch(upcomingError){console.warn('Upcoming matches fallback failed:',upcomingError);}}}if(result&&!needsFallback){console.log('✅ Match data received:',result);let matchData;// Handle different response formats\nif(result.universal){var _universal$homeTeam,_universal$homeTeam$i,_universal$homeTeam2,_merged$homeTeam,_universal$homeTeam3,_merged$homeTeam2,_result$allSports,_result$allSports$hom,_result$allSports2,_result$allSports2$ra,_sources$allSports,_sources$allSports$ho,_sources$apiFootball,_sources$apiFootball$,_universal$awayTeam,_universal$awayTeam$i,_universal$awayTeam2,_merged$awayTeam,_universal$awayTeam3,_merged$awayTeam2,_result$allSports3,_result$allSports3$aw,_result$allSports4,_result$allSports4$ra,_sources$allSports2,_sources$allSports2$a,_sources$apiFootball2,_sources$apiFootball3,_universal$league,_universal$league$id,_universal$league2,_merged$league,_universal$league3,_merged$league2,_universal$league4,_merged$league3,_result$allSports5,_result$allSports5$le,_result$allSports6,_result$allSports6$ra,_sources$allSports3,_sources$allSports3$l,_sources$apiFootball4,_sources$apiFootball5,_sources$allSports4,_sources$apiFootball6;// New unified format\nconsole.log('🔄 Processing unified system data');const universal=result.universal;const merged=result.merged||{};const sources=result.sources||{};// Determine data source\nconst availableSources=[];if(sources.allSports)availableSources.push('AllSports');if(sources.apiFootball)availableSources.push('API Football');setDataSource(availableSources.join(' + ')||'Unknown');matchData={id:universal.id||id,homeTeam:{id:((_universal$homeTeam=universal.homeTeam)===null||_universal$homeTeam===void 0?void 0:(_universal$homeTeam$i=_universal$homeTeam.id)===null||_universal$homeTeam$i===void 0?void 0:_universal$homeTeam$i.toString())||'',name:((_universal$homeTeam2=universal.homeTeam)===null||_universal$homeTeam2===void 0?void 0:_universal$homeTeam2.name)||((_merged$homeTeam=merged.homeTeam)===null||_merged$homeTeam===void 0?void 0:_merged$homeTeam.name)||'Unknown Team',logo:((_universal$homeTeam3=universal.homeTeam)===null||_universal$homeTeam3===void 0?void 0:_universal$homeTeam3.logo)||((_merged$homeTeam2=merged.homeTeam)===null||_merged$homeTeam2===void 0?void 0:_merged$homeTeam2.logo)||((_result$allSports=result.allSports)===null||_result$allSports===void 0?void 0:(_result$allSports$hom=_result$allSports.homeTeam)===null||_result$allSports$hom===void 0?void 0:_result$allSports$hom.logo)||((_result$allSports2=result.allSports)===null||_result$allSports2===void 0?void 0:(_result$allSports2$ra=_result$allSports2.rawData)===null||_result$allSports2$ra===void 0?void 0:_result$allSports2$ra.home_team_logo)||((_sources$allSports=sources.allSports)===null||_sources$allSports===void 0?void 0:(_sources$allSports$ho=_sources$allSports.homeTeam)===null||_sources$allSports$ho===void 0?void 0:_sources$allSports$ho.logo)||((_sources$apiFootball=sources.apiFootball)===null||_sources$apiFootball===void 0?void 0:(_sources$apiFootball$=_sources$apiFootball.homeTeam)===null||_sources$apiFootball$===void 0?void 0:_sources$apiFootball$.logo)||''},awayTeam:{id:((_universal$awayTeam=universal.awayTeam)===null||_universal$awayTeam===void 0?void 0:(_universal$awayTeam$i=_universal$awayTeam.id)===null||_universal$awayTeam$i===void 0?void 0:_universal$awayTeam$i.toString())||'',name:((_universal$awayTeam2=universal.awayTeam)===null||_universal$awayTeam2===void 0?void 0:_universal$awayTeam2.name)||((_merged$awayTeam=merged.awayTeam)===null||_merged$awayTeam===void 0?void 0:_merged$awayTeam.name)||'Unknown Team',logo:((_universal$awayTeam3=universal.awayTeam)===null||_universal$awayTeam3===void 0?void 0:_universal$awayTeam3.logo)||((_merged$awayTeam2=merged.awayTeam)===null||_merged$awayTeam2===void 0?void 0:_merged$awayTeam2.logo)||((_result$allSports3=result.allSports)===null||_result$allSports3===void 0?void 0:(_result$allSports3$aw=_result$allSports3.awayTeam)===null||_result$allSports3$aw===void 0?void 0:_result$allSports3$aw.logo)||((_result$allSports4=result.allSports)===null||_result$allSports4===void 0?void 0:(_result$allSports4$ra=_result$allSports4.rawData)===null||_result$allSports4$ra===void 0?void 0:_result$allSports4$ra.away_team_logo)||((_sources$allSports2=sources.allSports)===null||_sources$allSports2===void 0?void 0:(_sources$allSports2$a=_sources$allSports2.awayTeam)===null||_sources$allSports2$a===void 0?void 0:_sources$allSports2$a.logo)||((_sources$apiFootball2=sources.apiFootball)===null||_sources$apiFootball2===void 0?void 0:(_sources$apiFootball3=_sources$apiFootball2.awayTeam)===null||_sources$apiFootball3===void 0?void 0:_sources$apiFootball3.logo)||''},league:{id:((_universal$league=universal.league)===null||_universal$league===void 0?void 0:(_universal$league$id=_universal$league.id)===null||_universal$league$id===void 0?void 0:_universal$league$id.toString())||'',name:((_universal$league2=universal.league)===null||_universal$league2===void 0?void 0:_universal$league2.name)||((_merged$league=merged.league)===null||_merged$league===void 0?void 0:_merged$league.name)||'Unknown League',country:((_universal$league3=universal.league)===null||_universal$league3===void 0?void 0:_universal$league3.country)||((_merged$league2=merged.league)===null||_merged$league2===void 0?void 0:_merged$league2.country)||'',logo:((_universal$league4=universal.league)===null||_universal$league4===void 0?void 0:_universal$league4.logo)||((_merged$league3=merged.league)===null||_merged$league3===void 0?void 0:_merged$league3.logo)||((_result$allSports5=result.allSports)===null||_result$allSports5===void 0?void 0:(_result$allSports5$le=_result$allSports5.league)===null||_result$allSports5$le===void 0?void 0:_result$allSports5$le.logo)||((_result$allSports6=result.allSports)===null||_result$allSports6===void 0?void 0:(_result$allSports6$ra=_result$allSports6.rawData)===null||_result$allSports6$ra===void 0?void 0:_result$allSports6$ra.league_logo)||((_sources$allSports3=sources.allSports)===null||_sources$allSports3===void 0?void 0:(_sources$allSports3$l=_sources$allSports3.league)===null||_sources$allSports3$l===void 0?void 0:_sources$allSports3$l.logo)||((_sources$apiFootball4=sources.apiFootball)===null||_sources$apiFootball4===void 0?void 0:(_sources$apiFootball5=_sources$apiFootball4.league)===null||_sources$apiFootball5===void 0?void 0:_sources$apiFootball5.logo)||''},date:universal.date||merged.date||new Date().toISOString().split('T')[0],time:merged.time||universal.time||'',startTime:`${universal.date||merged.date}T${merged.time||'00:00'}:00`,status:merged.status||universal.status||'NS',venue:merged.venue||((_sources$allSports4=sources.allSports)===null||_sources$allSports4===void 0?void 0:_sources$allSports4.venue)||((_sources$apiFootball6=sources.apiFootball)===null||_sources$apiFootball6===void 0?void 0:_sources$apiFootball6.venue)||'',odds:merged.odds||{home:0,draw:0,away:0},probability:merged.probability||{home:'0%',draw:'0%',away:'0%'},score:merged.score||{home:0,away:0}};// Store the full result for reference\nmatchData._raw=result;}else{var _result$homeTeam2,_result$homeTeam2$id,_result$home_team_key,_result$homeTeam3,_result$homeTeam4,_result$awayTeam2,_result$awayTeam2$id,_result$away_team_key,_result$awayTeam3,_result$awayTeam4,_result$league,_result$league$id,_result$league_key,_result$league2,_result$league3,_result$league4,_result$score,_result$event_final_r,_result$score2,_result$event_final_r2;// Legacy format or direct API response\nconsole.log('🔄 Processing standard format data');setDataSource('AllSports API');matchData={id:result.id||id,homeTeam:{id:((_result$homeTeam2=result.homeTeam)===null||_result$homeTeam2===void 0?void 0:(_result$homeTeam2$id=_result$homeTeam2.id)===null||_result$homeTeam2$id===void 0?void 0:_result$homeTeam2$id.toString())||((_result$home_team_key=result.home_team_key)===null||_result$home_team_key===void 0?void 0:_result$home_team_key.toString())||'',name:((_result$homeTeam3=result.homeTeam)===null||_result$homeTeam3===void 0?void 0:_result$homeTeam3.name)||result.event_home_team||'Unknown Team',logo:((_result$homeTeam4=result.homeTeam)===null||_result$homeTeam4===void 0?void 0:_result$homeTeam4.logo)||result.home_team_logo||''},awayTeam:{id:((_result$awayTeam2=result.awayTeam)===null||_result$awayTeam2===void 0?void 0:(_result$awayTeam2$id=_result$awayTeam2.id)===null||_result$awayTeam2$id===void 0?void 0:_result$awayTeam2$id.toString())||((_result$away_team_key=result.away_team_key)===null||_result$away_team_key===void 0?void 0:_result$away_team_key.toString())||'',name:((_result$awayTeam3=result.awayTeam)===null||_result$awayTeam3===void 0?void 0:_result$awayTeam3.name)||result.event_away_team||'Unknown Team',logo:((_result$awayTeam4=result.awayTeam)===null||_result$awayTeam4===void 0?void 0:_result$awayTeam4.logo)||result.away_team_logo||''},league:{id:((_result$league=result.league)===null||_result$league===void 0?void 0:(_result$league$id=_result$league.id)===null||_result$league$id===void 0?void 0:_result$league$id.toString())||((_result$league_key=result.league_key)===null||_result$league_key===void 0?void 0:_result$league_key.toString())||'',name:((_result$league2=result.league)===null||_result$league2===void 0?void 0:_result$league2.name)||result.league_name||'Unknown League',country:((_result$league3=result.league)===null||_result$league3===void 0?void 0:_result$league3.country)||result.country_name||'',logo:((_result$league4=result.league)===null||_result$league4===void 0?void 0:_result$league4.logo)||result.league_logo||''},date:result.date||result.event_date||new Date().toISOString().split('T')[0],time:result.time||result.event_time||'',startTime:result.startTime||result.event_timestamp||'',status:result.status||result.event_status||'NS',venue:result.venue||result.event_stadium||'',odds:result.odds||{home:0,draw:0,away:0},probability:result.probability||{home:'0%',draw:'0%',away:'0%'},score:{home:((_result$score=result.score)===null||_result$score===void 0?void 0:_result$score.home)||parseInt((_result$event_final_r=result.event_final_result)===null||_result$event_final_r===void 0?void 0:_result$event_final_r.split('-')[0])||0,away:((_result$score2=result.score)===null||_result$score2===void 0?void 0:_result$score2.away)||parseInt((_result$event_final_r2=result.event_final_result)===null||_result$event_final_r2===void 0?void 0:_result$event_final_r2.split('-')[1])||0}};}console.log('📊 Final processed match data:',matchData);setMatchData(matchData);setIsLoading(false);return matchData;}else{throw new Error('Invalid response format');}}catch(error){console.error('❌ [SpecialMatch] Error fetching match data:',error);let errorMessage=`Unable to load match data for ID: ${id}.`;if(axios.isAxiosError(error)){var _error$response,_error$response2;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===404){errorMessage='Match not found. Please check the match ID or select a different match.';}else if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===500){errorMessage='Server error. Please try again later.';}else if(error.code==='ECONNABORTED'){errorMessage='Request timeout. Please check your connection.';}}setError(errorMessage);setIsLoading(false);return null;}};// Enhanced H2H fetching with better error handling\nconst fetchH2HData=async()=>{try{var _response$data2;console.log('🔍 [H2H Fetch] Starting H2H data fetch for match:',matchData);console.log('🔍 [H2H Fetch] Match ID:',matchId);console.log('🔍 [H2H Fetch] Home Team:',matchData.homeTeam);console.log('🔍 [H2H Fetch] Away Team:',matchData.awayTeam);// Extract team IDs - handle different formats\nlet homeTeamId=matchData.homeTeam.id;let awayTeamId=matchData.awayTeam.id;// Remove prefixes if present\nhomeTeamId=homeTeamId.replace(/^team-/,'');awayTeamId=awayTeamId.replace(/^team-/,'');// Check if we have valid IDs\nif(!homeTeamId||!awayTeamId||homeTeamId==='0'||awayTeamId==='0'){console.warn('⚠️ [H2H Fetch] Invalid team IDs for H2H:',{homeTeamId,awayTeamId});setH2hData(null);return;}console.log(`📊 [H2H Fetch] Fetching H2H for teams: ${homeTeamId} vs ${awayTeamId}`);console.log(`📊 [H2H Fetch] API URL: http://localhost:5000/api/matches/${matchId}/h2h`);const response=await axios.get(`http://localhost:5000/api/matches/${matchId}/h2h`,{timeout:15000});console.log('📊 [H2H Fetch] Response received:',response.data);if((_response$data2=response.data)!==null&&_response$data2!==void 0&&_response$data2.success&&response.data.result){const h2hData=response.data.result;console.log('✅ [H2H Fetch] H2H data received:',h2hData);// Validate H2H data structure\nif(h2hData.matches&&h2hData.summary){setH2hData(h2hData);console.log(`✅ [H2H Fetch] Processed ${h2hData.matches.length} H2H matches`);}else{console.warn('⚠️ [H2H Fetch] Invalid H2H data structure - missing matches or summary');setH2hData(null);}}else{console.warn('⚠️ [H2H Fetch] No H2H data in response');setH2hData(null);}}catch(error){console.error('❌ Error fetching H2H data:',error);// Don't set error state for H2H failures - just show no data\nsetH2hData(null);}};// Fetch corner stats data\nconst fetchCornerStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`🔍 Fetching corner stats for ${count} games`);if(count!==gameCount){setCornerStatsData(null);}const data=await cornerStatsService.fetchCornerStats(matchId,count);console.log('✅ Corner stats received:',data);if(count!==gameCount){setGameCount(count);}setCornerStatsData(data);return data;}catch(err){console.error('❌ Error fetching corner stats:',err);setCornerStatsData(null);throw err;}};// Fetch card stats data\nconst fetchCardStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`🔍 Fetching card stats for ${count} games`);if(count!==gameCount){setCardStatsData(null);}const data=await cardStatsService.fetchCardStats(matchId,count);console.log('✅ Card stats received:',data);if(count!==gameCount){setGameCount(count);}setCardStatsData(data);return data;}catch(err){console.error('❌ Error fetching card stats:',err);setCardStatsData(null);throw err;}};// Fetch BTTS stats data\nconst fetchBTTSStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`🔍 Fetching BTTS stats for ${count} games`);setBttsStatsData(null);const data=await bttsStatsService.fetchBTTSStats(matchId,count);console.log('✅ BTTS stats received:',data);if(count!==gameCount){setGameCount(count);}setBttsStatsData(data);return data;}catch(err){console.error('❌ Error fetching BTTS stats:',err);setBttsStatsData(null);throw err;}};// Fetch player stats data\nconst fetchPlayerStatsData=async function(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:gameCount;try{console.log(`🔍 Fetching player stats for ${count} games`);setPlayerStatsData(null);const data=await playerStatsService.fetchPlayerStatsForMatch(matchId,count);console.log('✅ Player stats received:',data);if(count!==gameCount){setGameCount(count);}setPlayerStatsData(data);return data;}catch(err){console.error('❌ Error fetching player stats:',err);setPlayerStatsData(null);throw err;}};// Fetch team form data\nconst fetchTeamFormData=async()=>{try{console.log('🔍 Fetching team form data');setHomeTeamForm(null);setAwayTeamForm(null);// Extract clean team IDs\nconst homeTeamId=matchData.homeTeam.id.replace(/^team-/,'');const awayTeamId=matchData.awayTeam.id.replace(/^team-/,'');// Validate IDs\nif(!homeTeamId||!awayTeamId||homeTeamId==='0'||awayTeamId==='0'){console.warn('⚠️ Invalid team IDs for form data');return;}const formData=await teamFormService.fetchMatchTeamsForm(homeTeamId,matchData.homeTeam.name,awayTeamId,matchData.awayTeam.name);console.log('✅ Team form data received:',formData);setHomeTeamForm(formData.homeTeamForm);setAwayTeamForm(formData.awayTeamForm);return formData;}catch(err){console.error('❌ Error fetching team form:',err);setHomeTeamForm(null);setAwayTeamForm(null);throw err;}};// Fetch league standings data\nconst fetchLeagueStandingsData=async()=>{try{console.log('🔍 Fetching league standings');setLeagueStandingsData(null);const leagueId=matchData.league.id;const homeTeamId=matchData.homeTeam.id.replace(/^team-/,'');const awayTeamId=matchData.awayTeam.id.replace(/^team-/,'');if(!leagueId||leagueId==='0'){console.warn('⚠️ Invalid league ID');return;}const data=await leagueService.fetchLeagueStandings(leagueId,homeTeamId,awayTeamId,matchData.id);console.log('✅ League standings received:',data);setLeagueStandingsData(data);return data;}catch(err){console.error('❌ Error fetching league standings:',err);setLeagueStandingsData(null);throw err;}};// Fetch all statistics when match data is ready\nuseEffect(()=>{console.log('📊 [Stats Effect] Match data changed:',{homeTeamId:matchData.homeTeam.id,awayTeamId:matchData.awayTeam.id,homeTeamName:matchData.homeTeam.name,awayTeamName:matchData.awayTeam.name});if(matchData.homeTeam.id&&matchData.awayTeam.id&&matchData.homeTeam.id!==''&&matchData.awayTeam.id!==''){console.log('📊 [Stats Effect] Match data ready, fetching all statistics...');// Fetch all data with error handling for each\nfetchH2HData().catch(console.error);fetchCornerStatsData().catch(console.error);fetchCardStatsData().catch(console.error);fetchBTTSStatsData().catch(console.error);fetchPlayerStatsData().catch(console.error);fetchLeagueStandingsData().catch(console.error);fetchTeamFormData().catch(console.error);}else{console.log('📊 [Stats Effect] Match data not ready yet, waiting...');}},[matchData.homeTeam.id,matchData.awayTeam.id]);// Handle game count changes\nuseEffect(()=>{const handleGameCountChange=e=>{const newGameCount=e.detail.gameCount;console.log(`📊 Game count changed to ${newGameCount}`);setGameCount(newGameCount);// Clear and refetch data\nsetCornerStatsData(null);setCardStatsData(null);setBttsStatsData(null);setPlayerStatsData(null);// Refetch with new count\nfetchCornerStatsData(newGameCount).catch(console.error);fetchCardStatsData(newGameCount).catch(console.error);fetchBTTSStatsData(newGameCount).catch(console.error);fetchPlayerStatsData(newGameCount).catch(console.error);};document.addEventListener('gameCountChange',handleGameCountChange);return()=>{document.removeEventListener('gameCountChange',handleGameCountChange);};},[matchId]);// Include matchId to ensure we're fetching for the right match\n// Fetch match data on mount or ID change\nuseEffect(()=>{console.log(`🎯 SpecialMatch mounted with matchId: ${matchId}`);fetchMatchData(matchId);},[matchId]);if(isLoading){return/*#__PURE__*/_jsx(Loader,{isOpen:true});}if(error){return/*#__PURE__*/_jsx(Container,{centerContent:true,py:10,children:/*#__PURE__*/_jsxs(Alert,{status:\"error\",borderRadius:\"md\",children:[/*#__PURE__*/_jsx(AlertIcon,{}),/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(AlertTitle,{children:\"Error Loading Match\"}),/*#__PURE__*/_jsx(AlertDescription,{children:error})]})]})});}return/*#__PURE__*/_jsx(Box,{bg:bgColor,minH:\"100vh\",children:/*#__PURE__*/_jsxs(Container,{maxW:\"container.xl\",py:5,children:[/*#__PURE__*/_jsxs(Box,{bg:bgColor,p:4,borderRadius:\"md\",boxShadow:\"sm\",mb:4,children:[/*#__PURE__*/_jsx(MatchHeader,{match:matchData,homeTeamForm:homeTeamForm,awayTeamForm:awayTeamForm,isLoadingForm:!homeTeamForm&&!awayTeamForm&&!error}),/*#__PURE__*/_jsx(Box,{mt:2,p:2,bg:\"blue.50\",borderRadius:\"md\",fontSize:\"sm\",color:\"blue.700\",children:/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Data Source:\"}),\" \",dataSource,\" |\",/*#__PURE__*/_jsx(\"strong\",{children:\" Match ID:\"}),\" \",matchData.id,\" |\",/*#__PURE__*/_jsx(\"strong\",{children:\" Updated:\"}),\" \",new Date().toLocaleString()]}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",gap:2,children:[/*#__PURE__*/_jsxs(Badge,{colorScheme:\"blue\",fontSize:\"sm\",children:[\"Analyzing: Last \",gameCount,\" matches\"]}),/*#__PURE__*/_jsx(Tooltip,{label:\"Clear all cached data and refresh\",children:/*#__PURE__*/_jsx(Button,{size:\"xs\",colorScheme:\"blue\",variant:\"ghost\",onClick:()=>{// Clear all caches\ncornerStatsService.clearCornerStatsCache();cardStatsService.clearCardStatsCache();bttsStatsService.clearBTTSStatsCache();playerStatsService.clearPlayerStatsCache();leagueService.clearLeagueStandingsCache();teamFormService.clearAllCache();// Refetch all data\nfetchMatchData(matchId);},children:\"Reset Cache\"})})]})]})})]}),/*#__PURE__*/_jsx(Box,{mt:6,children:/*#__PURE__*/_jsxs(Tabs,{isFitted:true,variant:\"enclosed\",colorScheme:\"blue\",index:tabIndex,onChange:setTabIndex,children:[/*#__PURE__*/_jsxs(TabList,{mb:\"1em\",children:[/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Head to Head\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Corner Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Card Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"BTTS Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"Player Stats\"}),/*#__PURE__*/_jsx(Tab,{fontWeight:\"medium\",children:\"League\"})]}),/*#__PURE__*/_jsxs(TabPanels,{children:[/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CustomHeadToHeadTab,{match:matchData,data:h2hData,isLoading:isLoading||!h2hData&&!error&&matchData.homeTeam.id&&matchData.awayTeam.id,initialMatchRange:gameCount},`h2h-${matchId}-${gameCount}`)}),/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CornerTabCustom,{match:matchData,data:cornerStatsData,isLoading:!cornerStatsData&&!error,initialGameCount:gameCount.toString(),onRefresh:fetchCornerStatsData},`corners-${matchId}-${gameCount}`)}),/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CustomCardsTab,{match:matchData,data:cardStatsData,isLoading:!cardStatsData&&!error,initialGameCount:gameCount.toString(),onRefresh:fetchCardStatsData},`cards-${matchId}-${gameCount}`)}),/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CustomBTTSTab,{match:matchData,data:bttsStatsData,isLoading:!bttsStatsData&&!error,initialGameCount:gameCount.toString(),onRefresh:fetchBTTSStatsData},`btts-${matchId}-${gameCount}`)}),/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CustomPlayerStatsTab,{match:matchData,data:playerStatsData,isLoading:!playerStatsData&&!error,initialGameCount:gameCount.toString(),onGameCountChange:count=>{const customEvent=new CustomEvent('gameCountChange',{detail:{gameCount:count,requiresRefetch:true},bubbles:true});document.dispatchEvent(customEvent);},onRefresh:fetchPlayerStatsData},`players-${matchId}-${gameCount}`)}),/*#__PURE__*/_jsx(TabPanel,{p:0,children:/*#__PURE__*/_jsx(CustomLeagueTab,{match:matchData,data:leagueStandingsData,isLoading:!leagueStandingsData&&!error,onRefresh:fetchLeagueStandingsData},`league-${matchId}`)})]})]})})]})});};export default SpecialMatch;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}