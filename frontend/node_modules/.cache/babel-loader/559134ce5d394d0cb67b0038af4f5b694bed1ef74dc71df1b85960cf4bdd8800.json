{"ast":null,"code":"import axios from 'axios';\n// Backend API Configuration - Use same pattern as Card Stats and BTTS\nconst BACKEND_BASE_URL = 'http://localhost:5000/api';\n\n// Cache for player statistics data\n\nconst playerStatsCache = {};\n\n// Clear cache function\nexport const clearPlayerStatsCache = () => {\n  Object.keys(playerStatsCache).forEach(key => delete playerStatsCache[key]);\n  console.log('[PlayerStatsService] Cache cleared');\n};\n\n// New backend-based function to fetch player stats using match ID\nexport const fetchPlayerStatsForMatch = async (matchId, gameCount = 10) => {\n  try {\n    // Create a cache key based on match ID and game count\n    const cacheKey = `match-${matchId}-${gameCount}`;\n\n    // Check if we have cached data that's less than 1 hour old\n    const cachedData = playerStatsCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < 3600000) {\n      console.log(`[PlayerStatsService] Using cached player stats data for match ${matchId} with ${gameCount} games`);\n      return cachedData.data;\n    }\n    console.log(`[PlayerStatsService] Fetching player stats from backend for match ${matchId} with ${gameCount} games`);\n\n    // Make request to backend player statistics endpoint\n    const response = await axios.get(`${BACKEND_BASE_URL}/matches/${matchId}/players`, {\n      params: {\n        matches: gameCount\n      },\n      timeout: 15000 // Same timeout as Card Stats\n    });\n    if (!response.data || !response.data.success || !response.data.result) {\n      throw new Error('Invalid response from backend player statistics endpoint');\n    }\n    const backendResult = response.data.result;\n\n    // Format the response to match PlayerStats interface\n    const result = {\n      homeTeamPlayers: backendResult.homeTeamPlayers,\n      awayTeamPlayers: backendResult.awayTeamPlayers,\n      topScorers: backendResult.topScorers,\n      lineups: backendResult.lineups,\n      isFallbackData: false,\n      // Backend only provides real data\n      gameCount: gameCount\n    };\n\n    // Cache the result\n    playerStatsCache[cacheKey] = {\n      data: result,\n      timestamp: Date.now()\n    };\n    console.log(`[PlayerStatsService] Successfully fetched player stats from backend for match ${matchId}`);\n    return result;\n  } catch (error) {\n    console.error('[PlayerStatsService] Error fetching player stats from backend:', error);\n    throw error;\n  }\n};\n\n// Legacy function for backward compatibility - redirects to new backend approach\nexport const fetchPlayerStats = async (homeTeamId, awayTeamId, leagueId, gameCount = 10) => {\n  // For now, we'll use a hardcoded match ID since we don't have a way to derive it from team IDs\n  // In a real implementation, you'd need to look up the match ID from team IDs\n  const matchId = '1430878'; // This should be passed from the calling component\n  const gameCountNum = typeof gameCount === 'string' ? parseInt(gameCount) : gameCount;\n  console.log(`[PlayerStatsService] Legacy function called, redirecting to backend approach for match ${matchId}`);\n  return fetchPlayerStatsForMatch(matchId, gameCountNum);\n};\nexport default {\n  fetchPlayerStats,\n  fetchPlayerStatsForMatch,\n  clearPlayerStatsCache\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}