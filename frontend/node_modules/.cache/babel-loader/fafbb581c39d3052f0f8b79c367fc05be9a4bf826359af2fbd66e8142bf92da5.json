{"ast":null,"code":"// Fixed and optimized implementation of soccerApiService\n\nimport axios from 'axios';\nimport { memoryCache } from './apiClient';\n\n// Re-export interfaces for backward compatibility\n\n// Cache TTLs in milliseconds\nexport const CACHE_TTL = {\n  LIVE_MATCHES: 30 * 1000,\n  // 30 seconds for live matches\n  UPCOMING_MATCHES: 5 * 60 * 1000,\n  // 5 minutes for upcoming matches\n  MATCH_DETAILS: 60 * 1000,\n  // 60 seconds for match details\n  STATS: 30 * 60 * 1000,\n  // 30 minutes for stats\n  PREMIUM_PICKS: 10 * 60 * 1000,\n  // 10 minutes for premium picks\n  PREMATCH_ANALYSIS: 5 * 60 * 1000 // 5 minutes for pre-match analysis\n};\nclass SoccerApiService {\n  constructor() {\n    this.baseUrl = void 0;\n    // Use backend API\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n  }\n  getCacheKey(prefix, id) {\n    return `${prefix}-${id}`;\n  }\n  async getMatchDetails(matchId) {\n    try {\n      const cacheKey = this.getCacheKey('match', matchId);\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.MATCH_DETAILS);\n      if (cachedData) {\n        console.log('Using cached match details for', matchId);\n        return cachedData;\n      }\n\n      // Try to get complete data first (includes all analysis data)\n      try {\n        console.log('Trying to fetch complete match details for', matchId);\n        const completeResponse = await fetch(`${this.baseUrl}/matches/${matchId}/complete`);\n        if (completeResponse.ok) {\n          const completeData = await completeResponse.json();\n          if (completeData.success && completeData.result) {\n            console.log('Successfully fetched complete match details for', matchId);\n            const match = completeData.result;\n            memoryCache.set(cacheKey, match);\n            return match;\n          }\n        }\n      } catch (error) {\n        console.log('Error fetching complete match details, falling back to basic data', error);\n      }\n\n      // Fall back to basic match details if complete data fails\n      console.log('Fetching basic match details for', matchId);\n      const response = await fetch(`${this.baseUrl}/matches/${matchId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch match details');\n      }\n      const data = await response.json();\n      if (!data.success || !data.result) {\n        return null;\n      }\n      const match = data.result;\n      memoryCache.set(cacheKey, match);\n      return match;\n    } catch (error) {\n      console.error(`Error fetching match ${matchId}:`, error);\n      return null;\n    }\n  }\n  async getLiveMatches() {\n    try {\n      const cacheKey = 'live-matches';\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.LIVE_MATCHES);\n      if (cachedData) {\n        return cachedData;\n      }\n      const response = await axios.get(`${this.baseUrl}/matches/live`);\n      const matches = response.data.result || [];\n      memoryCache.set(cacheKey, matches);\n      return matches;\n    } catch (error) {\n      console.error('Error fetching live matches:', error);\n      return [];\n    }\n  }\n  async getUpcomingMatches(hours = 24) {\n    try {\n      const cacheKey = this.getCacheKey('upcoming-matches', hours.toString());\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.UPCOMING_MATCHES);\n      if (cachedData) {\n        return cachedData;\n      }\n      const response = await axios.get(`${this.baseUrl}/matches/upcoming?hours=${hours}`);\n      const matches = response.data.result || [];\n      memoryCache.set(cacheKey, matches);\n      return matches;\n    } catch (error) {\n      console.error('Error fetching upcoming matches:', error);\n      return [];\n    }\n  }\n  async getPreMatchAnalysis(matchId) {\n    try {\n      const cacheKey = this.getCacheKey('pre-match-analysis', matchId);\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.PREMATCH_ANALYSIS);\n      if (cachedData) {\n        console.log('Using cached match analysis data');\n        return cachedData;\n      }\n      console.log(`Fetching match analysis for ID: ${matchId}`);\n      const response = await fetch(`${this.baseUrl}/analysis/matches/${matchId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch match analysis');\n      }\n      const data = await response.json();\n      if (!data.success || !data.result) {\n        console.error('Unexpected data format:', data);\n        return null;\n      }\n      const statsData = data.result;\n      memoryCache.set(cacheKey, statsData);\n      return statsData;\n    } catch (error) {\n      console.error(`Error fetching pre-match analysis for match ${matchId}:`, error);\n      return null;\n    }\n  }\n  async getHeadToHead(team1Id, team2Id) {\n    try {\n      const cacheKey = this.getCacheKey('h2h', `${team1Id}-${team2Id}`);\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.STATS);\n      if (cachedData) {\n        return cachedData;\n      }\n      const response = await axios.get(`${this.baseUrl}/analysis/h2h/${team1Id}/${team2Id}`);\n      const matches = response.data.result || [];\n      memoryCache.set(cacheKey, matches);\n      return matches;\n    } catch (error) {\n      console.error('Error fetching head-to-head matches:', error);\n      return null;\n    }\n  }\n  async getStats(period = 'all') {\n    try {\n      const cacheKey = this.getCacheKey('stats', period);\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.STATS);\n      if (cachedData) {\n        return cachedData;\n      }\n      const response = await axios.get(`${this.baseUrl}/stats?period=${period}`);\n      const stats = response.data.result || null;\n      if (stats) {\n        memoryCache.set(cacheKey, stats);\n      }\n      return stats;\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      return null;\n    }\n  }\n  async getPremiumPicks() {\n    try {\n      const cacheKey = 'premium-picks';\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.PREMIUM_PICKS);\n      if (cachedData) {\n        return cachedData;\n      }\n      const response = await axios.get(`${this.baseUrl}/matches/premium-picks`);\n      const picks = response.data.result || [];\n      memoryCache.set(cacheKey, picks);\n      return picks;\n    } catch (error) {\n      console.error('Error fetching premium picks:', error);\n      return [];\n    }\n  }\n  async getBettingPerformance(period = 'week') {\n    try {\n      const cacheKey = this.getCacheKey('betting-performance', period);\n      const cachedData = memoryCache.get(cacheKey, CACHE_TTL.STATS);\n      if (cachedData) {\n        return cachedData;\n      }\n      const response = await axios.get(`${this.baseUrl}/stats/performance?period=${period}`);\n      const performance = response.data.result || [];\n      memoryCache.set(cacheKey, performance);\n      return performance;\n    } catch (error) {\n      console.error('Error fetching betting performance:', error);\n      return [];\n    }\n  }\n}\nexport default new SoccerApiService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}