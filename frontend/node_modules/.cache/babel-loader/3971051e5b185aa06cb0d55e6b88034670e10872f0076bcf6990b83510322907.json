{"ast":null,"code":"import axios from 'axios';\nimport { API_KEY } from '../config/api-config';\n\n// Base URL for the API\nconst BASE_URL = 'https://apiv2.allsportsapi.com/football';\n\n// Types for league standings\n\n// Cache for league standings data to reduce API calls\nconst leagueStandingsCache = {};\n\n// Cache expiration time (30 minutes)\nconst CACHE_EXPIRATION = 30 * 60 * 1000;\n\n// Clear cache function\nexport const clearLeagueStandingsCache = () => {\n  Object.keys(leagueStandingsCache).forEach(key => {\n    delete leagueStandingsCache[key];\n  });\n  console.log('[LeagueService] Cache cleared');\n};\n\n// Format team standings data\nconst formatTeamStandings = (standings, homeTeamId, awayTeamId) => {\n  return standings.map(standing => ({\n    position: parseInt(standing.standing_place),\n    team: {\n      id: standing.team_key,\n      name: standing.standing_team,\n      logo: `https://apiv2.allsportsapi.com/logo/${standing.team_key}_${standing.standing_team.toLowerCase().replace(/\\s+/g, '-')}.png`\n    },\n    played: parseInt(standing.standing_P),\n    won: parseInt(standing.standing_W),\n    drawn: parseInt(standing.standing_D),\n    lost: parseInt(standing.standing_L),\n    goalsFor: parseInt(standing.standing_F),\n    goalsAgainst: parseInt(standing.standing_A),\n    goalDifference: parseInt(standing.standing_GD),\n    points: parseInt(standing.standing_PTS),\n    form: [],\n    // We don't have form data from the API\n    homeTeamId: homeTeamId,\n    awayTeamId: awayTeamId\n  }));\n};\n\n// Fetch league standings from the API\nconst fetchLeagueStandings = async (leagueId, homeTeamId, awayTeamId, signal) => {\n  try {\n    console.log(`[LeagueService] Fetching standings for league ${leagueId}`);\n\n    // Check cache first\n    const cacheKey = `league_${leagueId}`;\n    const cachedData = leagueStandingsCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRATION) {\n      console.log(`[LeagueService] Using cached data for league ${leagueId}`);\n      return cachedData.data;\n    }\n\n    // Use direct URL construction to avoid any potential issues with axios params\n    const url = `${BASE_URL}/?met=Standings&leagueId=${leagueId}&APIkey=${API_KEY}`;\n    console.log(`[LeagueService] Making API request to: ${url.replace(API_KEY, 'API_KEY_HIDDEN')}`);\n    const response = await axios.get(url, {\n      signal,\n      timeout: 8000,\n      decompress: true\n    });\n\n    // Check if the API response is valid\n    if (!response.data || response.data.success !== 1 || !response.data.result) {\n      console.error('[LeagueService] Invalid API response:', response.data);\n      return null;\n    }\n    const apiStandings = response.data.result;\n\n    // Extract league info from first standing entry\n    const firstStanding = apiStandings.total[0] || {};\n\n    // Format the standings data\n    const formattedStandings = {\n      league: {\n        id: firstStanding.league_key,\n        name: firstStanding.league_season ? `${firstStanding.league_season}` : 'League Standings',\n        season: firstStanding.league_season\n      },\n      standings: formatTeamStandings(apiStandings.total, homeTeamId, awayTeamId)\n    };\n\n    // Cache the formatted data\n    leagueStandingsCache[cacheKey] = {\n      data: formattedStandings,\n      timestamp: Date.now()\n    };\n    return formattedStandings;\n  } catch (error) {\n    console.error('[LeagueService] Error fetching league standings:', error);\n    return null;\n  }\n};\n\n// Export the service\nconst leagueService = {\n  fetchLeagueStandings,\n  clearLeagueStandingsCache\n};\nexport default leagueService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}