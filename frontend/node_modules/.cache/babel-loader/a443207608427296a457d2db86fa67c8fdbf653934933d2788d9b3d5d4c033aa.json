{"ast":null,"code":"import axios from 'axios';\n// Backend API Configuration\nconst BACKEND_BASE_URL = 'http://localhost:5000/api';\n\n// Cache for card statistics data\n\nconst cardStatsCache = {};\n\n// Clear cache function\nconst clearCardStatsCache = () => {\n  Object.keys(cardStatsCache).forEach(key => delete cardStatsCache[key]);\n  console.log('[CardStatsService] Cache cleared');\n};\n\n// Main function to fetch card statistics from backend\nconst fetchCardStats = async (matchId, gameCount = 10) => {\n  try {\n    // Create a cache key based on match ID and game count\n    const cacheKey = `${matchId}-${gameCount}`;\n\n    // Check if we have cached data that's less than 1 hour old\n    const cachedData = cardStatsCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < 3600000) {\n      console.log(`[CardStatsService] Using cached card stats data for ${cacheKey}`);\n      return cachedData.data;\n    }\n    console.log(`[CardStatsService] Fetching card stats from backend for match ${matchId} with ${gameCount} games`);\n\n    // Make request to backend card statistics endpoint\n    const response = await axios.get(`${BACKEND_BASE_URL}/matches/${matchId}/cards`, {\n      params: {\n        matches: gameCount\n      },\n      timeout: 15000\n    });\n    if (!response.data || !response.data.success || !response.data.result) {\n      throw new Error('Invalid response from backend card statistics endpoint');\n    }\n    const backendResult = response.data.result;\n\n    // Transform backend response to match frontend CardStats interface\n    const result = {\n      homeStats: {\n        teamId: backendResult.homeStats.teamId,\n        totalYellowCards: backendResult.homeStats.totalYellowCards,\n        totalRedCards: backendResult.homeStats.totalRedCards,\n        totalCards: backendResult.homeStats.totalCards,\n        averageYellowCardsPerMatch: backendResult.homeStats.averageYellowCardsPerMatch,\n        averageRedCardsPerMatch: backendResult.homeStats.averageRedCardsPerMatch,\n        averageCardsPerMatch: backendResult.homeStats.averageCardsPerMatch,\n        cardsByPeriod: backendResult.homeStats.cardsByPeriod,\n        mostCardedPlayers: backendResult.homeStats.mostCardedPlayers,\n        overRates: backendResult.homeStats.overRates\n      },\n      awayStats: {\n        teamId: backendResult.awayStats.teamId,\n        totalYellowCards: backendResult.awayStats.totalYellowCards,\n        totalRedCards: backendResult.awayStats.totalRedCards,\n        totalCards: backendResult.awayStats.totalCards,\n        averageYellowCardsPerMatch: backendResult.awayStats.averageYellowCardsPerMatch,\n        averageRedCardsPerMatch: backendResult.awayStats.averageRedCardsPerMatch,\n        averageCardsPerMatch: backendResult.awayStats.averageCardsPerMatch,\n        cardsByPeriod: backendResult.awayStats.cardsByPeriod,\n        mostCardedPlayers: backendResult.awayStats.mostCardedPlayers,\n        overRates: backendResult.awayStats.overRates\n      },\n      combinedStats: backendResult.combinedStats,\n      isFallbackData: false // Backend only provides real data\n    };\n\n    // Cache the result\n    cardStatsCache[cacheKey] = {\n      data: result,\n      timestamp: Date.now()\n    };\n    console.log(`[CardStatsService] Successfully fetched card stats from backend for match ${matchId}`);\n    console.log(`[CardStatsService] Home team: ${result.homeStats.totalCards} cards, Away team: ${result.awayStats.totalCards} cards`);\n    console.log(`[CardStatsService] Combined average: ${result.combinedStats.averageCardsPerMatch.toFixed(2)} cards per match`);\n    return result;\n  } catch (error) {\n    console.error('[CardStatsService] Error fetching card stats from backend:', error);\n    throw error;\n  }\n};\nexport default {\n  fetchCardStats,\n  clearCardStatsCache\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}