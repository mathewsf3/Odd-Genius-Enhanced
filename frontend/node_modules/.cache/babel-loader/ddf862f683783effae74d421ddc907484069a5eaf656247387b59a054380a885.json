{"ast":null,"code":"// Fixed and optimized implementation of soccerApiService\nimport axios from'axios';import{memoryCache}from'./apiClient';// Re-export interfaces for backward compatibility\n// Cache TTLs in milliseconds\nexport const CACHE_TTL={LIVE_MATCHES:30*1000,// 30 seconds for live matches\nUPCOMING_MATCHES:5*60*1000,// 5 minutes for upcoming matches\nMATCH_DETAILS:60*1000,// 60 seconds for match details\nSTATS:30*60*1000,// 30 minutes for stats\nPREMIUM_PICKS:10*60*1000,// 10 minutes for premium picks\nPREMATCH_ANALYSIS:5*60*1000// 5 minutes for pre-match analysis\n};class SoccerApiService{constructor(){this.baseUrl=void 0;// Use backend API\nthis.baseUrl=process.env.REACT_APP_API_URL||'http://localhost:5000/api';}getCacheKey(prefix,id){return`${prefix}-${id}`;}async getMatchDetails(matchId){try{const cacheKey=this.getCacheKey('match',matchId);const cachedData=memoryCache.get(cacheKey,CACHE_TTL.MATCH_DETAILS);if(cachedData){console.log('Using cached match details for',matchId);return cachedData;}// Try to get complete data first (includes all analysis data)\ntry{console.log('Trying to fetch complete match details for',matchId);const completeResponse=await fetch(`${this.baseUrl}/matches/${matchId}/complete`);if(completeResponse.ok){const completeData=await completeResponse.json();if(completeData.success&&completeData.result){console.log('Successfully fetched complete match details for',matchId);const match=completeData.result;memoryCache.set(cacheKey,match);return match;}}}catch(error){console.log('Error fetching complete match details, falling back to basic data',error);}// Fall back to basic match details if complete data fails\nconsole.log('Fetching basic match details for',matchId);const response=await fetch(`${this.baseUrl}/matches/${matchId}`);if(!response.ok){throw new Error('Failed to fetch match details');}const data=await response.json();if(!data.success||!data.result){return null;}const match=data.result;memoryCache.set(cacheKey,match);return match;}catch(error){console.error(`Error fetching match ${matchId}:`,error);return null;}}async getLiveMatches(){try{const cacheKey='live-matches';const cachedData=memoryCache.get(cacheKey,CACHE_TTL.LIVE_MATCHES);if(cachedData){return cachedData;}const response=await axios.get(`${this.baseUrl}/matches/live`);const matches=response.data.result||[];memoryCache.set(cacheKey,matches);return matches;}catch(error){console.error('Error fetching live matches:',error);return[];}}async getUpcomingMatches(){let hours=arguments.length>0&&arguments[0]!==undefined?arguments[0]:24;try{const cacheKey=this.getCacheKey('upcoming-matches',hours.toString());const cachedData=memoryCache.get(cacheKey,CACHE_TTL.UPCOMING_MATCHES);if(cachedData){return cachedData;}const response=await axios.get(`${this.baseUrl}/matches/upcoming?hours=${hours}`);const matches=response.data.result||[];memoryCache.set(cacheKey,matches);return matches;}catch(error){console.error('Error fetching upcoming matches:',error);return[];}}async getPreMatchAnalysis(matchId){try{const cacheKey=this.getCacheKey('pre-match-analysis',matchId);const cachedData=memoryCache.get(cacheKey,CACHE_TTL.PREMATCH_ANALYSIS);if(cachedData){console.log('Using cached match analysis data');return cachedData;}console.log(`Fetching match analysis for ID: ${matchId}`);const response=await fetch(`${this.baseUrl}/analysis/matches/${matchId}`);if(!response.ok){throw new Error('Failed to fetch match analysis');}const data=await response.json();if(!data.success||!data.result){console.error('Unexpected data format:',data);return null;}const statsData=data.result;memoryCache.set(cacheKey,statsData);return statsData;}catch(error){console.error(`Error fetching pre-match analysis for match ${matchId}:`,error);return null;}}async getHeadToHead(team1Id,team2Id){try{const cacheKey=this.getCacheKey('h2h',`${team1Id}-${team2Id}`);const cachedData=memoryCache.get(cacheKey,CACHE_TTL.STATS);if(cachedData){return cachedData;}const response=await axios.get(`${this.baseUrl}/analysis/h2h/${team1Id}/${team2Id}`);const matches=response.data.result||[];memoryCache.set(cacheKey,matches);return matches;}catch(error){console.error('Error fetching head-to-head matches:',error);return null;}}async getStats(){let period=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'all';try{const cacheKey=this.getCacheKey('stats',period);const cachedData=memoryCache.get(cacheKey,CACHE_TTL.STATS);if(cachedData){return cachedData;}const response=await axios.get(`${this.baseUrl}/stats?period=${period}`);const stats=response.data.result||null;if(stats){memoryCache.set(cacheKey,stats);}return stats;}catch(error){console.error('Error fetching stats:',error);return null;}}async getPremiumPicks(){try{const cacheKey='premium-picks';const cachedData=memoryCache.get(cacheKey,CACHE_TTL.PREMIUM_PICKS);if(cachedData){return cachedData;}const response=await axios.get(`${this.baseUrl}/matches/premium-picks`);const picks=response.data.result||[];memoryCache.set(cacheKey,picks);return picks;}catch(error){console.error('Error fetching premium picks:',error);return[];}}async getBettingPerformance(){let period=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'week';try{const cacheKey=this.getCacheKey('betting-performance',period);const cachedData=memoryCache.get(cacheKey,CACHE_TTL.STATS);if(cachedData){return cachedData;}const response=await axios.get(`${this.baseUrl}/stats/performance?period=${period}`);const performance=response.data.result||[];memoryCache.set(cacheKey,performance);return performance;}catch(error){console.error('Error fetching betting performance:',error);return[];}}}export default new SoccerApiService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}