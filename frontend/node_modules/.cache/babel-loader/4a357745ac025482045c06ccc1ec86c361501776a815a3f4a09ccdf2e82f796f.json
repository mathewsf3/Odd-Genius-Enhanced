{"ast":null,"code":"import axios from 'axios';\nimport { memoryCache } from './cache';\nexport const cachedApiRequest = async (method, url, data, cacheTTL, config) => {\n  // If cacheTTL is provided and it's a GET request, try to get from cache\n  if (cacheTTL && method.toLowerCase() === 'get') {\n    const cacheKey = `${method}-${url}`;\n    const cachedData = memoryCache.get(cacheKey, cacheTTL);\n    if (cachedData) {\n      return cachedData.data;\n    }\n  }\n  try {\n    const response = await axios({\n      method,\n      url,\n      data,\n      ...config\n    });\n\n    // If cacheTTL is provided and it's a GET request, cache the response\n    if (cacheTTL && method.toLowerCase() === 'get') {\n      const cacheKey = `${method}-${url}`;\n      const cacheData = {\n        data: response.data,\n        timestamp: Date.now()\n      };\n      memoryCache.set(cacheKey, cacheData);\n    }\n    return response.data;\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\nexport const apiRequest = async (method, url, data, config) => {\n  try {\n    const response = await axios({\n      method,\n      url,\n      data,\n      ...config\n    });\n    return response.data;\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Export memoryCache and apiClient as a constant for backwards compatibility\nexport const apiClient = {\n  get: (url, config) => apiRequest('get', url, undefined, config),\n  post: (url, data, config) => apiRequest('post', url, data, config),\n  put: (url, data, config) => apiRequest('put', url, data, config),\n  delete: (url, config) => apiRequest('delete', url, undefined, config)\n};\n\n// Export memoryCache for backward compatibility\nexport { memoryCache };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}