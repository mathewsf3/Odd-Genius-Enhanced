{"ast":null,"code":"import axios from'axios';// Base URL for the API\nconst BASE_URL='https://apiv2.allsportsapi.com/football';// Types for league standings\n// Cache for league standings data to reduce API calls\nconst leagueStandingsCache={};// Cache expiration time (30 minutes)\nconst CACHE_EXPIRATION=30*60*1000;// Clear cache function\nexport const clearLeagueStandingsCache=()=>{Object.keys(leagueStandingsCache).forEach(key=>{delete leagueStandingsCache[key];});console.log('[LeagueService] Cache cleared');};// Format team standings data\nconst formatTeamStandings=(standings,homeTeamId,awayTeamId)=>{return standings.map(standing=>({position:parseInt(standing.standing_place),team:{id:standing.team_key,name:standing.standing_team,logo:`https://apiv2.allsportsapi.com/logo/${standing.team_key}_${standing.standing_team.toLowerCase().replace(/\\s+/g,'-')}.png`},played:parseInt(standing.standing_P),won:parseInt(standing.standing_W),drawn:parseInt(standing.standing_D),lost:parseInt(standing.standing_L),goalsFor:parseInt(standing.standing_F),goalsAgainst:parseInt(standing.standing_A),goalDifference:parseInt(standing.standing_GD),points:parseInt(standing.standing_PTS),form:[],// We don't have form data from the API\nhomeTeamId:homeTeamId,awayTeamId:awayTeamId}));};// Fetch league standings from the API\nconst fetchLeagueStandings=async(leagueId,homeTeamId,awayTeamId,matchId,signal)=>{try{var _backendData$league6,_backendData$league7,_backendData$league8,_backendData$league9,_backendData$league0;console.log(`[LeagueService] Fetching standings for league ${leagueId} via backend`);// Check cache first\nconst cacheKey=`league_${leagueId}`;const cachedData=leagueStandingsCache[cacheKey];if(cachedData&&Date.now()-cachedData.timestamp<CACHE_EXPIRATION){console.log(`[LeagueService] Using cached data for league ${leagueId}`);return cachedData.data;}// Use backend API instead of direct AllSportsAPI call to eliminate duplicate loading\nconst backendUrl=`http://localhost:5000/api/leagues/${leagueId}/standings`;console.log(`[LeagueService] Making backend API request to: ${backendUrl}`);// Build query parameters\nconst params={};if(matchId){params.matchId=matchId;console.log(`[LeagueService] Including match ID in request: ${matchId}`);}const response=await axios.get(backendUrl,{params,signal,timeout:10000,headers:{'Content-Type':'application/json'}});// Check if the backend response is valid\nif(!response.data||!response.data.success){console.error('[LeagueService] Invalid backend response:',response.data);return null;}// Handle case where backend returns success but no result (API error)\nif(!response.data.result){console.warn('[LeagueService] Backend returned success but no result data for league',leagueId);return null;}const backendData=response.data.result;// Check if we have standings data\nif(!backendData.standings||backendData.standings.length===0){var _backendData$league,_backendData$league2,_backendData$league3,_backendData$league4,_backendData$league5;console.warn(`[LeagueService] No standings data available for league ${leagueId}:`,backendData.message||'Unknown reason');// Return a structured response for competitions without standings\nreturn{league:{id:((_backendData$league=backendData.league)===null||_backendData$league===void 0?void 0:_backendData$league.id)||leagueId,name:((_backendData$league2=backendData.league)===null||_backendData$league2===void 0?void 0:_backendData$league2.name)||'Competition',logo:(_backendData$league3=backendData.league)===null||_backendData$league3===void 0?void 0:_backendData$league3.logo,country:(_backendData$league4=backendData.league)===null||_backendData$league4===void 0?void 0:_backendData$league4.country,season:(_backendData$league5=backendData.league)===null||_backendData$league5===void 0?void 0:_backendData$league5.season},standings:[],message:backendData.message||'No standings data available for this competition.'};}// Format the standings data with dynamic team logos\nconst formattedStandings={league:{id:((_backendData$league6=backendData.league)===null||_backendData$league6===void 0?void 0:_backendData$league6.id)||leagueId,name:((_backendData$league7=backendData.league)===null||_backendData$league7===void 0?void 0:_backendData$league7.name)||'League Standings',logo:(_backendData$league8=backendData.league)===null||_backendData$league8===void 0?void 0:_backendData$league8.logo,country:(_backendData$league9=backendData.league)===null||_backendData$league9===void 0?void 0:_backendData$league9.country,season:(_backendData$league0=backendData.league)===null||_backendData$league0===void 0?void 0:_backendData$league0.season},standings:backendData.standings.map(standing=>({position:standing.position,team:{id:standing.team.id,name:standing.team.name,logo:standing.team.logo// Use dynamic logo from backend\n},played:standing.played,won:standing.won,drawn:standing.drawn,lost:standing.lost,goalsFor:standing.goalsFor,goalsAgainst:standing.goalsAgainst,goalDifference:standing.goalDifference,points:standing.points,form:standing.form||[],homeTeamId:homeTeamId,awayTeamId:awayTeamId}))};// Cache the formatted data\nleagueStandingsCache[cacheKey]={data:formattedStandings,timestamp:Date.now()};console.log(`[LeagueService] Successfully fetched and cached standings for league ${leagueId}`);return formattedStandings;}catch(error){console.error('[LeagueService] Error fetching league standings:',error);return null;}};// Export the service\nconst leagueService={fetchLeagueStandings,clearLeagueStandingsCache};export default leagueService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}