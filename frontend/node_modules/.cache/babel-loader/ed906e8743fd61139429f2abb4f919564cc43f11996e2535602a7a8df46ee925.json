{"ast":null,"code":"import axios from 'axios';\n\n// Base URLs for APIs\nconst BACKEND_BASE_URL = 'http://localhost:5000/api';\nconst ALLSPORTS_BASE_URL = 'https://apiv2.allsportsapi.com/football';\nconst API_KEY = '9af98e929db6f98a1561c444b6179b5740a69b942cb3ffcc62b80a7eda5128b4';\n\n// Cache configuration\nconst CACHE_EXPIRATION = 30 * 60 * 1000; // 30 minutes for leagues\nconst LOGO_CACHE_EXPIRATION = 24 * 60 * 60 * 1000; // 24 hours for logos\nconst leaguesCache = {};\nconst logoCache = {};\n\n// Logo management utilities\nconst createLogoAsset = (url, quality = 'medium') => {\n  var _url$split$pop;\n  const fallbackUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(((_url$split$pop = url.split('/').pop()) === null || _url$split$pop === void 0 ? void 0 : _url$split$pop.substring(0, 2)) || 'L')}&background=252535&color=6366F1&bold=true&size=128`;\n  return {\n    url: url || fallbackUrl,\n    fallbackUrl,\n    cached: false,\n    quality,\n    format: url !== null && url !== void 0 && url.includes('.svg') ? 'svg' : url !== null && url !== void 0 && url.includes('.webp') ? 'webp' : 'png',\n    size: 'md'\n  };\n};\nconst optimizeLogo = (logoAsset, targetSize = 'md') => {\n  const sizeMap = {\n    sm: '64',\n    md: '128',\n    lg: '256'\n  };\n  const size = sizeMap[targetSize];\n\n  // If it's a UI avatar, update the size parameter\n  if (logoAsset.url.includes('ui-avatars.com')) {\n    const updatedUrl = logoAsset.url.replace(/size=\\d+/, `size=${size}`);\n    return {\n      ...logoAsset,\n      url: updatedUrl,\n      size: targetSize\n    };\n  }\n  return {\n    ...logoAsset,\n    size: targetSize\n  };\n};\n\n// Enhanced League interface based on AI team analysis\n\n// Logo asset management interface\n\n// League filters interface\n\n// Enhanced league state interface\n\n/**\n * Enhanced function to fetch all leagues with live/upcoming status\n */\nconst fetchEnhancedLeagues = async (filters, signal) => {\n  try {\n    var _leaguesResponse$data, _leaguesResponse$data2, _liveMatchesResponse$, _upcomingMatchesRespo;\n    console.log('[LeaguesService] Fetching enhanced leagues with filters:', filters);\n\n    // Check cache first\n    const cacheKey = `enhanced_leagues_${JSON.stringify(filters || {})}`;\n    const cachedData = leaguesCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRATION) {\n      console.log('[LeaguesService] Using cached enhanced leagues data');\n      return cachedData.data;\n    }\n\n    // Fetch leagues from AllSportsAPI\n    const leaguesResponse = await axios.get(ALLSPORTS_BASE_URL, {\n      params: {\n        met: 'Leagues',\n        APIkey: API_KEY,\n        ...((filters === null || filters === void 0 ? void 0 : filters.country) && {\n          countryId: filters.country\n        })\n      },\n      signal,\n      timeout: 15000\n    });\n    if (!((_leaguesResponse$data = leaguesResponse.data) !== null && _leaguesResponse$data !== void 0 && _leaguesResponse$data.success) || !((_leaguesResponse$data2 = leaguesResponse.data) !== null && _leaguesResponse$data2 !== void 0 && _leaguesResponse$data2.result)) {\n      console.warn('[LeaguesService] No leagues data from AllSportsAPI');\n      return [];\n    }\n\n    // Fetch live matches to determine league status\n    const liveMatchesResponse = await axios.get(`${BACKEND_BASE_URL}/matches/live`, {\n      signal,\n      timeout: 10000\n    }).catch(error => {\n      console.warn('[LeaguesService] Failed to fetch live matches:', error.message);\n      return {\n        data: {\n          success: false,\n          result: []\n        }\n      };\n    });\n\n    // Fetch upcoming matches\n    const upcomingMatchesResponse = await axios.get(`${BACKEND_BASE_URL}/matches/upcoming`, {\n      signal,\n      timeout: 10000\n    }).catch(error => {\n      console.warn('[LeaguesService] Failed to fetch upcoming matches:', error.message);\n      return {\n        data: {\n          success: false,\n          result: []\n        }\n      };\n    });\n\n    // Fix: Backend returns 'result', not 'matches'\n    const liveMatches = ((_liveMatchesResponse$ = liveMatchesResponse.data) === null || _liveMatchesResponse$ === void 0 ? void 0 : _liveMatchesResponse$.result) || [];\n    const upcomingMatches = ((_upcomingMatchesRespo = upcomingMatchesResponse.data) === null || _upcomingMatchesRespo === void 0 ? void 0 : _upcomingMatchesRespo.result) || [];\n    console.log(`[LeaguesService] Found ${liveMatches.length} live matches and ${upcomingMatches.length} upcoming matches`);\n\n    // Process leagues with enhanced data\n    const enhancedLeagues = leaguesResponse.data.result.map(apiLeague => {\n      const leagueId = apiLeague.league_key;\n\n      // Count matches for this league - check multiple possible league ID formats\n      const liveCount = liveMatches.filter(match => {\n        var _match$league, _match$league2;\n        const matchLeagueId = ((_match$league = match.league) === null || _match$league === void 0 ? void 0 : _match$league.id) || ((_match$league2 = match.league) === null || _match$league2 === void 0 ? void 0 : _match$league2.key) || match.league_key || match.league_id;\n        return matchLeagueId === leagueId || matchLeagueId === String(leagueId);\n      }).length;\n      const upcomingCount = upcomingMatches.filter(match => {\n        var _match$league3, _match$league4;\n        const matchLeagueId = ((_match$league3 = match.league) === null || _match$league3 === void 0 ? void 0 : _match$league3.id) || ((_match$league4 = match.league) === null || _match$league4 === void 0 ? void 0 : _match$league4.key) || match.league_key || match.league_id;\n        return matchLeagueId === leagueId || matchLeagueId === String(leagueId);\n      }).length;\n\n      // Determine league status\n      let status = 'finished';\n      if (liveCount > 0) status = 'live';else if (upcomingCount > 0) status = 'upcoming';\n\n      // Create logo asset\n      const logoAsset = createLogoAsset(apiLeague.league_logo, 'high');\n      const league = {\n        id: leagueId,\n        name: apiLeague.league_name,\n        country: apiLeague.country_name,\n        logo: logoAsset,\n        season: apiLeague.league_season || new Date().getFullYear(),\n        status,\n        liveMatches: liveCount,\n        upcomingMatches: upcomingCount,\n        finishedMatches: 0,\n        // Would need additional API call\n        lastUpdated: new Date(),\n        api: 'allsports',\n        priority: getPriorityForLeague(apiLeague.league_name, apiLeague.country_name)\n      };\n\n      // Debug logging for popular leagues\n      if (league.priority <= 10) {\n        console.log(`[LeaguesService] Popular league: ${league.name} (${league.country}) - Live: ${liveCount}, Upcoming: ${upcomingCount}, Status: ${status}`);\n      }\n      return league;\n    });\n\n    // Apply filters\n    const filteredLeagues = enhancedLeagues.filter(league => {\n      if (filters !== null && filters !== void 0 && filters.status && filters.status !== 'all' && league.status !== filters.status) {\n        return false;\n      }\n      if (filters !== null && filters !== void 0 && filters.hasMatches && !league.liveMatches && !league.upcomingMatches) {\n        return false;\n      }\n      if (filters !== null && filters !== void 0 && filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        return league.name.toLowerCase().includes(searchLower) || league.country.toLowerCase().includes(searchLower);\n      }\n      return true;\n    });\n\n    // Sort by priority and status\n    const sortedLeagues = filteredLeagues.sort((a, b) => {\n      // Live leagues first\n      if (a.status === 'live' && b.status !== 'live') return -1;\n      if (b.status === 'live' && a.status !== 'live') return 1;\n\n      // Then by priority\n      if (a.priority !== b.priority) return (a.priority || 999) - (b.priority || 999);\n\n      // Then by match count\n      const aMatches = (a.liveMatches || 0) + (a.upcomingMatches || 0);\n      const bMatches = (b.liveMatches || 0) + (b.upcomingMatches || 0);\n      return bMatches - aMatches;\n    });\n\n    // Cache the result\n    leaguesCache[cacheKey] = {\n      data: sortedLeagues,\n      timestamp: Date.now()\n    };\n    console.log(`[LeaguesService] Successfully fetched ${sortedLeagues.length} enhanced leagues`);\n    return sortedLeagues;\n  } catch (error) {\n    console.error('[LeaguesService] Error fetching enhanced leagues:', error);\n    return [];\n  }\n};\n\n// Helper function to assign priority to popular leagues\nconst getPriorityForLeague = (leagueName, countryName) => {\n  const name = leagueName.toLowerCase();\n  const country = countryName.toLowerCase();\n\n  // Top tier leagues\n  if (name.includes('premier league') && country.includes('england')) return 1;\n  if (name.includes('la liga') || name.includes('primera divisiÃ³n')) return 2;\n  if (name.includes('bundesliga') && country.includes('germany')) return 3;\n  if (name.includes('serie a') && country.includes('italy')) return 4;\n  if (name.includes('ligue 1') && country.includes('france')) return 5;\n\n  // Champions League and Europa League\n  if (name.includes('champions league')) return 1;\n  if (name.includes('europa league')) return 6;\n  if (name.includes('conference league')) return 7;\n\n  // Other major leagues\n  if (name.includes('eredivisie')) return 8;\n  if (name.includes('primeira liga')) return 9;\n  if (name.includes('championship') && country.includes('england')) return 10;\n\n  // Default priority\n  return 50;\n};\n\n/**\n * Fetch all live leagues with current matches (legacy function for compatibility)\n */\nconst fetchLiveLeagues = async signal => {\n  try {\n    const leagues = await fetchEnhancedLeagues({\n      status: 'live',\n      hasMatches: true\n    }, signal);\n\n    // Convert to legacy format\n    const leagueMap = new Map();\n    leagues.forEach(league => {\n      leagueMap.set(league.id, {\n        id: league.id,\n        name: league.name,\n        country: league.country,\n        logo: league.logo.url,\n        matchCount: league.liveMatches || 0,\n        isLive: league.status === 'live',\n        api: league.api\n      });\n    });\n\n    // Group leagues by country\n    const countryGroups = new Map();\n    Array.from(leagueMap.values()).forEach(league => {\n      const country = league.country || 'International';\n      if (!countryGroups.has(country)) {\n        countryGroups.set(country, []);\n      }\n      countryGroups.get(country).push(league);\n    });\n\n    // Convert to grouped format\n    const groupedByCountry = Array.from(countryGroups.entries()).map(([country, leagues]) => ({\n      country,\n      leagues: leagues.sort((a, b) => (b.matchCount || 0) - (a.matchCount || 0)),\n      totalMatches: leagues.reduce((sum, league) => sum + (league.matchCount || 0), 0)\n    })).sort((a, b) => b.totalMatches - a.totalMatches);\n    return {\n      leagues: Array.from(leagueMap.values()),\n      groupedByCountry,\n      totalLiveMatches: leagues.reduce((sum, league) => sum + (league.liveMatches || 0), 0),\n      lastUpdated: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('[LeaguesService] Error fetching live leagues:', error);\n    return null;\n  }\n};\n\n/**\n * Fetch all available leagues (not just live ones)\n */\nconst fetchAllLeagues = async (countryId, signal) => {\n  try {\n    var _response$data, _response$data2;\n    console.log('[LeaguesService] Fetching all available leagues...');\n    const cacheKey = `all_leagues_${countryId || 'all'}`;\n    const cachedData = leaguesCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRATION) {\n      console.log('[LeaguesService] Using cached all leagues data');\n      return cachedData.data;\n    }\n\n    // Fetch from AllSportsAPI\n    const params = {\n      met: 'Leagues',\n      APIkey: API_KEY\n    };\n    if (countryId) {\n      params.countryId = countryId;\n    }\n    const response = await axios.get(ALLSPORTS_BASE_URL, {\n      params,\n      signal,\n      timeout: 15000\n    });\n    if (!((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success) || !((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.result)) {\n      console.warn('[LeaguesService] No leagues data available from AllSportsAPI');\n      return [];\n    }\n    const leagues = response.data.result.map(league => ({\n      id: league.league_key,\n      name: league.league_name,\n      country: league.country_name,\n      logo: league.league_logo,\n      season: league.league_season || new Date().getFullYear(),\n      type: 'league',\n      isLive: false,\n      api: 'allsports'\n    }));\n\n    // Cache the result\n    leaguesCache[cacheKey] = {\n      data: leagues,\n      timestamp: Date.now()\n    };\n    console.log(`[LeaguesService] Successfully fetched ${leagues.length} leagues`);\n    return leagues;\n  } catch (error) {\n    console.error('[LeaguesService] Error fetching all leagues:', error);\n    return [];\n  }\n};\n\n/**\n * Get league details with current standings\n */\nconst getLeagueDetails = async (leagueId, signal) => {\n  try {\n    var _response$data3;\n    console.log(`[LeaguesService] Fetching details for league ${leagueId}`);\n    const response = await axios.get(`${BACKEND_BASE_URL}/leagues/${leagueId}/standings`, {\n      signal,\n      timeout: 10000\n    });\n    if (!((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success)) {\n      console.warn(`[LeaguesService] No standings data for league ${leagueId}`);\n      return null;\n    }\n    return response.data.result;\n  } catch (error) {\n    console.error(`[LeaguesService] Error fetching league details for ${leagueId}:`, error);\n    return null;\n  }\n};\n\n/**\n * Clear leagues cache\n */\nconst clearLeaguesCache = () => {\n  Object.keys(leaguesCache).forEach(key => {\n    delete leaguesCache[key];\n  });\n  console.log('[LeaguesService] Cache cleared');\n};\n\n/**\n * Get countries with leagues\n */\nconst fetchCountries = async signal => {\n  try {\n    var _response$data4, _response$data5;\n    console.log('[LeaguesService] Fetching countries...');\n    const response = await axios.get(ALLSPORTS_BASE_URL, {\n      params: {\n        met: 'Countries',\n        APIkey: API_KEY\n      },\n      signal,\n      timeout: 10000\n    });\n    if (!((_response$data4 = response.data) !== null && _response$data4 !== void 0 && _response$data4.success) || !((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.result)) {\n      return [];\n    }\n    return response.data.result.map(country => ({\n      id: country.country_key,\n      name: country.country_name,\n      logo: country.country_logo\n    }));\n  } catch (error) {\n    console.error('[LeaguesService] Error fetching countries:', error);\n    return [];\n  }\n};\n\n// Export the service\nconst leaguesService = {\n  fetchLiveLeagues,\n  fetchAllLeagues,\n  fetchEnhancedLeagues,\n  getLeagueDetails,\n  fetchCountries,\n  clearLeaguesCache,\n  createLogoAsset,\n  optimizeLogo\n};\nexport default leaguesService;\n\n// Named exports for enhanced functionality\nexport { fetchEnhancedLeagues, createLogoAsset, optimizeLogo, getPriorityForLeague };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}