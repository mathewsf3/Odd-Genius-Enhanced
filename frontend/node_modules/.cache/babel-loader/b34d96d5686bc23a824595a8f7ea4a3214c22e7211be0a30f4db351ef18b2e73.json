{"ast":null,"code":"import axios from 'axios';\n// Backend API Configuration - Use same pattern as Card Stats\nconst BACKEND_BASE_URL = 'http://localhost:5000/api';\n\n// Cache for BTTS statistics data\n\nconst bttsStatsCache = {};\n\n// Clear cache function\nconst clearBTTSStatsCache = () => {\n  Object.keys(bttsStatsCache).forEach(key => delete bttsStatsCache[key]);\n  console.log('[BTTSStatsService] Cache cleared');\n};\n\n// Main function to fetch BTTS statistics from backend - following Card Stats pattern\nconst fetchBTTSStats = async (matchId, gameCount = 10) => {\n  try {\n    // Create a cache key based on match ID and game count\n    const cacheKey = `${matchId}-${gameCount}`;\n\n    // Check if we have cached data that's less than 1 hour old\n    const cachedData = bttsStatsCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < 3600000) {\n      console.log(`[BTTSStatsService] Using cached BTTS stats data for ${cacheKey}`);\n      return cachedData.data;\n    }\n    console.log(`[BTTSStatsService] Fetching BTTS stats from backend for match ${matchId} with ${gameCount} games`);\n\n    // Make request to backend BTTS statistics endpoint\n    const response = await axios.get(`${BACKEND_BASE_URL}/matches/${matchId}/btts`, {\n      params: {\n        matches: gameCount\n      },\n      timeout: 15000 // Same timeout as Card Stats\n    });\n    if (!response.data || !response.data.success || !response.data.result) {\n      throw new Error('Invalid response from backend BTTS statistics endpoint');\n    }\n    const backendResult = response.data.result;\n\n    // Format the response to match BTTSStats interface\n    const result = {\n      homeStats: {\n        teamId: backendResult.homeStats.teamId,\n        teamName: backendResult.homeStats.teamName,\n        totalMatches: backendResult.homeStats.totalMatches,\n        bttsYesCount: backendResult.homeStats.bttsYesCount,\n        bttsYesPercentage: backendResult.homeStats.bttsYesPercentage,\n        cleanSheetCount: backendResult.homeStats.cleanSheetCount,\n        cleanSheetPercentage: backendResult.homeStats.cleanSheetPercentage,\n        failedToScoreCount: backendResult.homeStats.failedToScoreCount,\n        failedToScorePercentage: backendResult.homeStats.failedToScorePercentage,\n        homeMatches: backendResult.homeStats.homeMatches,\n        homeBttsYesCount: backendResult.homeStats.homeBttsYesCount,\n        homeBttsYesPercentage: backendResult.homeStats.homeBttsYesPercentage,\n        homeCleanSheetCount: backendResult.homeStats.homeCleanSheetCount,\n        homeCleanSheetPercentage: backendResult.homeStats.homeCleanSheetPercentage,\n        homeFailedToScoreCount: backendResult.homeStats.homeFailedToScoreCount,\n        homeFailedToScorePercentage: backendResult.homeStats.homeFailedToScorePercentage,\n        awayMatches: backendResult.homeStats.awayMatches,\n        awayBttsYesCount: backendResult.homeStats.awayBttsYesCount,\n        awayBttsYesPercentage: backendResult.homeStats.awayBttsYesPercentage,\n        awayCleanSheetCount: backendResult.homeStats.awayCleanSheetCount,\n        awayCleanSheetPercentage: backendResult.homeStats.awayCleanSheetPercentage,\n        awayFailedToScoreCount: backendResult.homeStats.awayFailedToScoreCount,\n        awayFailedToScorePercentage: backendResult.homeStats.awayFailedToScorePercentage,\n        recentForm: backendResult.homeStats.recentForm || []\n      },\n      awayStats: {\n        teamId: backendResult.awayStats.teamId,\n        teamName: backendResult.awayStats.teamName,\n        totalMatches: backendResult.awayStats.totalMatches,\n        bttsYesCount: backendResult.awayStats.bttsYesCount,\n        bttsYesPercentage: backendResult.awayStats.bttsYesPercentage,\n        cleanSheetCount: backendResult.awayStats.cleanSheetCount,\n        cleanSheetPercentage: backendResult.awayStats.cleanSheetPercentage,\n        failedToScoreCount: backendResult.awayStats.failedToScoreCount,\n        failedToScorePercentage: backendResult.awayStats.failedToScorePercentage,\n        homeMatches: backendResult.awayStats.homeMatches,\n        homeBttsYesCount: backendResult.awayStats.homeBttsYesCount,\n        homeBttsYesPercentage: backendResult.awayStats.homeBttsYesPercentage,\n        homeCleanSheetCount: backendResult.awayStats.homeCleanSheetCount,\n        homeCleanSheetPercentage: backendResult.awayStats.homeCleanSheetPercentage,\n        homeFailedToScoreCount: backendResult.awayStats.homeFailedToScoreCount,\n        homeFailedToScorePercentage: backendResult.awayStats.homeFailedToScorePercentage,\n        awayMatches: backendResult.awayStats.awayMatches,\n        awayBttsYesCount: backendResult.awayStats.awayBttsYesCount,\n        awayBttsYesPercentage: backendResult.awayStats.awayBttsYesPercentage,\n        awayCleanSheetCount: backendResult.awayStats.awayCleanSheetCount,\n        awayCleanSheetPercentage: backendResult.awayStats.awayCleanSheetPercentage,\n        awayFailedToScoreCount: backendResult.awayStats.awayFailedToScoreCount,\n        awayFailedToScorePercentage: backendResult.awayStats.awayFailedToScorePercentage,\n        recentForm: backendResult.awayStats.recentForm || []\n      },\n      h2hStats: backendResult.h2hStats,\n      combinedStats: backendResult.combinedStats,\n      isFallbackData: false // Backend only provides real data\n    };\n\n    // Cache the result\n    bttsStatsCache[cacheKey] = {\n      data: result,\n      timestamp: Date.now()\n    };\n    console.log(`[BTTSStatsService] Successfully fetched BTTS stats from backend for match ${matchId}`);\n    console.log(`[BTTSStatsService] Home team: ${result.homeStats.bttsYesPercentage}% BTTS, Away team: ${result.awayStats.bttsYesPercentage}% BTTS`);\n    console.log(`[BTTSStatsService] Combined prediction: ${result.combinedStats.prediction} (${result.combinedStats.bttsYesProbability}%)`);\n    return result;\n  } catch (error) {\n    console.error('[BTTSStatsService] Error fetching BTTS stats from backend:', error);\n    throw error;\n  }\n};\nexport default {\n  fetchBTTSStats,\n  clearBTTSStatsCache\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}