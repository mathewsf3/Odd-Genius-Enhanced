{"ast":null,"code":"import axios from'axios';const API_KEY='9af98e929db6f98a1561c444b6179b5740a69b942cb3ffcc62b80a7eda5128b4';const BASE_URL='https://apiv2.allsportsapi.com/football';class TeamFormService{constructor(){this.cache=new Map();this.CACHE_DURATION=5*60*1000;}// 5 minutes\ngetCacheKey(teamId){return`team_form_${teamId}`;}isValidCache(timestamp){return Date.now()-timestamp<this.CACHE_DURATION;}/**\n   * Fetch team fixtures from AllSportsAPI\n   */async fetchTeamFixtures(teamId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;try{console.log(`[TeamFormService] Fetching fixtures for team ${teamId}`);// Try different API endpoints for team fixtures\nconst endpoints=[`${BASE_URL}/?met=Fixtures&teamId=${teamId}&APIkey=${API_KEY}`,`${BASE_URL}/?met=Fixtures&teamId=${teamId}&from=2024-01-01&to=2024-12-31&APIkey=${API_KEY}`,`${BASE_URL}/?met=Teams&teamId=${teamId}&APIkey=${API_KEY}`];for(const endpoint of endpoints){try{var _response$data,_response$data2,_response$data2$resul,_response$data3,_response$data3$resul;console.log(`[TeamFormService] Trying endpoint: ${endpoint}`);const response=await axios.get(endpoint);console.log(`[TeamFormService] Response for team ${teamId}:`,{status:response.status,success:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.success,resultLength:(_response$data2=response.data)===null||_response$data2===void 0?void 0:(_response$data2$resul=_response$data2.result)===null||_response$data2$resul===void 0?void 0:_response$data2$resul.length,sampleData:(_response$data3=response.data)===null||_response$data3===void 0?void 0:(_response$data3$resul=_response$data3.result)===null||_response$data3$resul===void 0?void 0:_response$data3$resul.slice(0,2)});if(response.data&&response.data.success===1&&response.data.result){const fixtures=Array.isArray(response.data.result)?response.data.result:[response.data.result];console.log(`[TeamFormService] Found ${fixtures.length} fixtures for team ${teamId}`);// Filter for finished matches and sort by date (most recent first)\nconst finishedMatches=fixtures.filter(fixture=>{const isFinished=fixture.event_status==='Finished'||fixture.match_status==='Finished'||fixture.event_final_result||fixture.match_hometeam_score!==undefined;console.log(`[TeamFormService] Fixture status check:`,{event_status:fixture.event_status,match_status:fixture.match_status,event_final_result:fixture.event_final_result,isFinished});return isFinished;}).sort((a,b)=>{const dateA=new Date(a.event_date||a.match_date||a.event_time);const dateB=new Date(b.event_date||b.match_date||b.event_time);return dateB.getTime()-dateA.getTime();}).slice(0,limit);console.log(`[TeamFormService] Found ${finishedMatches.length} finished matches for team ${teamId}`);console.log(`[TeamFormService] Sorted matches by date (newest first):`,finishedMatches.map(m=>`${m.event_date||m.match_date} - ${m.event_home_team||m.match_hometeam_name} vs ${m.event_away_team||m.match_awayteam_name}`));if(finishedMatches.length>0){console.log(`[TeamFormService] Sample finished match:`,finishedMatches[0]);return finishedMatches;}}}catch(endpointError){console.warn(`[TeamFormService] Endpoint failed:`,endpoint,endpointError);continue;}}console.warn(`[TeamFormService] No fixtures found for team ${teamId} from any endpoint`);return[];}catch(error){console.error(`[TeamFormService] Error fetching fixtures for team ${teamId}:`,error);return[];}}/**\n   * Process fixtures to determine form results\n   */processFixtures(fixtures,teamId,teamName){const formResults=[];// Log the fixtures for debugging\nconsole.log(`[TeamFormService] Processing ${fixtures.length} fixtures for ${teamName} (ID: ${teamId})`);fixtures.forEach((fixture,index)=>{try{// Extract match details with multiple field name fallbacks\nconst homeTeamId=fixture.event_home_team_id||fixture.home_team_key||fixture.match_hometeam_id;const awayTeamId=fixture.event_away_team_id||fixture.away_team_key||fixture.match_awayteam_id;const homeTeamName=fixture.event_home_team||fixture.match_hometeam_name;const awayTeamName=fixture.event_away_team||fixture.match_awayteam_name;const matchDate=fixture.event_date||fixture.match_date;const matchTime=fixture.event_time||'';// Extract scores with multiple field name fallbacks\nlet homeScore;let awayScore;if(fixture.event_final_result){// Format: \"2 - 1\"\nconst scoreParts=fixture.event_final_result.split(' - ');homeScore=parseInt(scoreParts[0])||0;awayScore=parseInt(scoreParts[1])||0;}else{homeScore=parseInt(fixture.event_home_final_result||fixture.match_hometeam_score||'0');awayScore=parseInt(fixture.event_away_final_result||fixture.match_awayteam_score||'0');}// Determine if this team was home or away\nconst isHome=String(homeTeamId)===String(teamId);const opponent=isHome?awayTeamName:homeTeamName;const teamScore=isHome?homeScore:awayScore;const opponentScore=isHome?awayScore:homeScore;// Determine result\nlet result;if(teamScore>opponentScore){result='W';}else if(teamScore<opponentScore){result='L';}else{result='D';}// Log each match for debugging\nconsole.log(`[TeamFormService] Match ${index+1}: ${matchDate} ${matchTime} - ${isHome?'HOME':'AWAY'} vs ${opponent} - Score: ${teamScore}-${opponentScore} - Result: ${result}`);formResults.push({result,score:`${teamScore}-${opponentScore}`,opponent:opponent||'Unknown',date:matchDate||'',isHome});}catch(error){console.warn('[TeamFormService] Error processing fixture:',error,fixture);}});// Take the first 5 results (they're already sorted by date DESC in fetchTeamFixtures)\nconst recentForm=formResults.slice(0,5);// Log the final form sequence\nconst formSequence=recentForm.map(r=>r.result).join('');console.log(`[TeamFormService] Final form sequence for ${teamName}: ${formSequence} (most recent first)`);return recentForm;}/**\n   * Fetch team form data\n   */async fetchTeamForm(teamId,teamName){const cacheKey=this.getCacheKey(teamId);const cached=this.cache.get(cacheKey);// Return cached data if valid\nif(cached&&this.isValidCache(cached.timestamp)){console.log(`[TeamFormService] Returning cached form data for team ${teamId}`);return cached.data;}try{console.log(`[TeamFormService] Fetching fresh form data for team ${teamId} (${teamName})`);// Fetch recent fixtures\nconst fixtures=await this.fetchTeamFixtures(teamId,10);// Process fixtures to get form\nconst formResults=this.processFixtures(fixtures,teamId,teamName);// Create form string (e.g., \"WWLDW\")\nconst formString=formResults.map(result=>result.result).join('');const teamForm={teamId,teamName,form:formResults,formString};// Cache the result\nthis.cache.set(cacheKey,{data:teamForm,timestamp:Date.now()});console.log(`[TeamFormService] Successfully fetched form for ${teamName}: ${formString}`);console.log(`[TeamFormService] Form details for ${teamName}:`,formResults);return teamForm;}catch(error){console.error(`[TeamFormService] Error fetching form for team ${teamId}:`,error);// Return empty form data when API fails - no mock data\nreturn{teamId,teamName,form:[],formString:''};}}/**\n   * Fetch form data for both teams in a match\n   */async fetchMatchTeamsForm(homeTeamId,homeTeamName,awayTeamId,awayTeamName){console.log(`[TeamFormService] Fetching form data for match: ${homeTeamName} vs ${awayTeamName}`);try{// Fetch both teams' form data in parallel\nconst[homeTeamForm,awayTeamForm]=await Promise.all([this.fetchTeamForm(homeTeamId,homeTeamName),this.fetchTeamForm(awayTeamId,awayTeamName)]);return{homeTeamForm,awayTeamForm};}catch(error){console.error('[TeamFormService] Error fetching match teams form:',error);// Return empty form data on error\nreturn{homeTeamForm:{teamId:homeTeamId,teamName:homeTeamName,form:[],formString:''},awayTeamForm:{teamId:awayTeamId,teamName:awayTeamName,form:[],formString:''}};}}/**\n   * Clear cache for a specific team\n   */clearTeamCache(teamId){const cacheKey=this.getCacheKey(teamId);this.cache.delete(cacheKey);console.log(`[TeamFormService] Cleared cache for team ${teamId}`);}/**\n   * Clear all cached data\n   */clearAllCache(){this.cache.clear();console.log('[TeamFormService] Cleared all form cache');}}export default new TeamFormService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}