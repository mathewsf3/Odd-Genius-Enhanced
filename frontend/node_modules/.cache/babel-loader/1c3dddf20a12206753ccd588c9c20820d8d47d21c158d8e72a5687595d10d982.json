{"ast":null,"code":"import axios from 'axios';\n// Base URL for the API\nconst BASE_URL = 'https://apiv2.allsportsapi.com/football';\n\n// Types for league standings\n\n// Cache for league standings data to reduce API calls\nconst leagueStandingsCache = {};\n\n// Cache expiration time (30 minutes)\nconst CACHE_EXPIRATION = 30 * 60 * 1000;\n\n// Clear cache function\nexport const clearLeagueStandingsCache = () => {\n  Object.keys(leagueStandingsCache).forEach(key => {\n    delete leagueStandingsCache[key];\n  });\n  console.log('[LeagueService] Cache cleared');\n};\n\n// Format team standings data\nconst formatTeamStandings = (standings, homeTeamId, awayTeamId) => {\n  return standings.map(standing => ({\n    position: parseInt(standing.standing_place),\n    team: {\n      id: standing.team_key,\n      name: standing.standing_team,\n      logo: `https://apiv2.allsportsapi.com/logo/${standing.team_key}_${standing.standing_team.toLowerCase().replace(/\\s+/g, '-')}.png`\n    },\n    played: parseInt(standing.standing_P),\n    won: parseInt(standing.standing_W),\n    drawn: parseInt(standing.standing_D),\n    lost: parseInt(standing.standing_L),\n    goalsFor: parseInt(standing.standing_F),\n    goalsAgainst: parseInt(standing.standing_A),\n    goalDifference: parseInt(standing.standing_GD),\n    points: parseInt(standing.standing_PTS),\n    form: [],\n    // We don't have form data from the API\n    homeTeamId: homeTeamId,\n    awayTeamId: awayTeamId\n  }));\n};\n\n// Fetch league standings from the API\nconst fetchLeagueStandings = async (leagueId, homeTeamId, awayTeamId, signal) => {\n  try {\n    var _backendData$league, _backendData$league2, _backendData$league3, _backendData$league4, _backendData$league5;\n    console.log(`[LeagueService] Fetching standings for league ${leagueId} via backend`);\n\n    // Check cache first\n    const cacheKey = `league_${leagueId}`;\n    const cachedData = leagueStandingsCache[cacheKey];\n    if (cachedData && Date.now() - cachedData.timestamp < CACHE_EXPIRATION) {\n      console.log(`[LeagueService] Using cached data for league ${leagueId}`);\n      return cachedData.data;\n    }\n\n    // Use backend API instead of direct AllSportsAPI call to eliminate duplicate loading\n    const backendUrl = `http://localhost:5000/api/leagues/${leagueId}/standings`;\n    console.log(`[LeagueService] Making backend API request to: ${backendUrl}`);\n    const response = await axios.get(backendUrl, {\n      signal,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Check if the backend response is valid\n    if (!response.data || !response.data.success || !response.data.result) {\n      console.error('[LeagueService] Invalid backend response:', response.data);\n      return null;\n    }\n    const backendData = response.data.result;\n\n    // Check if we have standings data\n    if (!backendData.standings || backendData.standings.length === 0) {\n      console.warn(`[LeagueService] No standings data available for league ${leagueId}`);\n      return null;\n    }\n\n    // Format the standings data with dynamic team logos\n    const formattedStandings = {\n      league: {\n        id: ((_backendData$league = backendData.league) === null || _backendData$league === void 0 ? void 0 : _backendData$league.id) || leagueId,\n        name: ((_backendData$league2 = backendData.league) === null || _backendData$league2 === void 0 ? void 0 : _backendData$league2.name) || 'League Standings',\n        logo: (_backendData$league3 = backendData.league) === null || _backendData$league3 === void 0 ? void 0 : _backendData$league3.logo,\n        country: (_backendData$league4 = backendData.league) === null || _backendData$league4 === void 0 ? void 0 : _backendData$league4.country,\n        season: (_backendData$league5 = backendData.league) === null || _backendData$league5 === void 0 ? void 0 : _backendData$league5.season\n      },\n      standings: backendData.standings.map(standing => ({\n        position: standing.position,\n        team: {\n          id: standing.team.id,\n          name: standing.team.name,\n          logo: standing.team.logo // Use dynamic logo from backend\n        },\n        played: standing.played,\n        won: standing.won,\n        drawn: standing.drawn,\n        lost: standing.lost,\n        goalsFor: standing.goalsFor,\n        goalsAgainst: standing.goalsAgainst,\n        goalDifference: standing.goalDifference,\n        points: standing.points,\n        form: standing.form || [],\n        homeTeamId: homeTeamId,\n        awayTeamId: awayTeamId\n      }))\n    };\n\n    // Cache the formatted data\n    leagueStandingsCache[cacheKey] = {\n      data: formattedStandings,\n      timestamp: Date.now()\n    };\n    console.log(`[LeagueService] Successfully fetched and cached standings for league ${leagueId}`);\n    return formattedStandings;\n  } catch (error) {\n    console.error('[LeagueService] Error fetching league standings:', error);\n    return null;\n  }\n};\n\n// Export the service\nconst leagueService = {\n  fetchLeagueStandings,\n  clearLeagueStandingsCache\n};\nexport default leagueService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}