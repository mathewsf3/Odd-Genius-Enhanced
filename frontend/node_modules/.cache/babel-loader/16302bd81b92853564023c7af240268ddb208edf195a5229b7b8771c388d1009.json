{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = '9af98e929db6f98a1561c444b6179b5740a69b942cb3ffcc62b80a7eda5128b4';\nconst BASE_URL = 'https://apiv2.allsportsapi.com/football';\nclass TeamFormService {\n  constructor() {\n    this.cache = new Map();\n    this.CACHE_DURATION = 5 * 60 * 1000;\n  }\n  // 5 minutes\n\n  getCacheKey(teamId) {\n    return `team_form_${teamId}`;\n  }\n  isValidCache(timestamp) {\n    return Date.now() - timestamp < this.CACHE_DURATION;\n  }\n\n  /**\n   * Fetch team fixtures from AllSportsAPI\n   */\n  async fetchTeamFixtures(teamId, limit = 10) {\n    try {\n      console.log(`[TeamFormService] Fetching fixtures for team ${teamId}`);\n\n      // Try different API endpoints for team fixtures\n      const endpoints = [`${BASE_URL}/?met=Fixtures&teamId=${teamId}&APIkey=${API_KEY}`, `${BASE_URL}/?met=Fixtures&teamId=${teamId}&from=2024-01-01&to=2024-12-31&APIkey=${API_KEY}`, `${BASE_URL}/?met=Teams&teamId=${teamId}&APIkey=${API_KEY}`];\n      for (const endpoint of endpoints) {\n        try {\n          var _response$data, _response$data2, _response$data2$resul, _response$data3, _response$data3$resul;\n          console.log(`[TeamFormService] Trying endpoint: ${endpoint}`);\n          const response = await axios.get(endpoint);\n          console.log(`[TeamFormService] Response for team ${teamId}:`, {\n            status: response.status,\n            success: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.success,\n            resultLength: (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$resul = _response$data2.result) === null || _response$data2$resul === void 0 ? void 0 : _response$data2$resul.length,\n            sampleData: (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$resul = _response$data3.result) === null || _response$data3$resul === void 0 ? void 0 : _response$data3$resul.slice(0, 2)\n          });\n          if (response.data && response.data.success === 1 && response.data.result) {\n            const fixtures = Array.isArray(response.data.result) ? response.data.result : [response.data.result];\n            console.log(`[TeamFormService] Found ${fixtures.length} fixtures for team ${teamId}`);\n\n            // Filter for finished matches and sort by date (most recent first)\n            const finishedMatches = fixtures.filter(fixture => {\n              const isFinished = fixture.event_status === 'Finished' || fixture.match_status === 'Finished' || fixture.event_final_result || fixture.match_hometeam_score !== undefined;\n              console.log(`[TeamFormService] Fixture status check:`, {\n                event_status: fixture.event_status,\n                match_status: fixture.match_status,\n                event_final_result: fixture.event_final_result,\n                isFinished\n              });\n              return isFinished;\n            }).sort((a, b) => {\n              const dateA = new Date(a.event_date || a.match_date || a.event_time);\n              const dateB = new Date(b.event_date || b.match_date || b.event_time);\n              return dateB.getTime() - dateA.getTime();\n            }).slice(0, limit);\n            console.log(`[TeamFormService] Found ${finishedMatches.length} finished matches for team ${teamId}`);\n            console.log(`[TeamFormService] Sorted matches by date (newest first):`, finishedMatches.map(m => `${m.event_date || m.match_date} - ${m.event_home_team || m.match_hometeam_name} vs ${m.event_away_team || m.match_awayteam_name}`));\n            if (finishedMatches.length > 0) {\n              console.log(`[TeamFormService] Sample finished match:`, finishedMatches[0]);\n              return finishedMatches;\n            }\n          }\n        } catch (endpointError) {\n          console.warn(`[TeamFormService] Endpoint failed:`, endpoint, endpointError);\n          continue;\n        }\n      }\n      console.warn(`[TeamFormService] No fixtures found for team ${teamId} from any endpoint`);\n      return [];\n    } catch (error) {\n      console.error(`[TeamFormService] Error fetching fixtures for team ${teamId}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Process fixtures to determine form results\n   */\n  processFixtures(fixtures, teamId, teamName) {\n    const formResults = [];\n\n    // Log the fixtures for debugging\n    console.log(`[TeamFormService] Processing ${fixtures.length} fixtures for ${teamName} (ID: ${teamId})`);\n    fixtures.forEach((fixture, index) => {\n      try {\n        // Extract match details with multiple field name fallbacks\n        const homeTeamId = fixture.event_home_team_id || fixture.home_team_key || fixture.match_hometeam_id;\n        const awayTeamId = fixture.event_away_team_id || fixture.away_team_key || fixture.match_awayteam_id;\n        const homeTeamName = fixture.event_home_team || fixture.match_hometeam_name;\n        const awayTeamName = fixture.event_away_team || fixture.match_awayteam_name;\n        const matchDate = fixture.event_date || fixture.match_date;\n        const matchTime = fixture.event_time || '';\n\n        // Extract scores with multiple field name fallbacks\n        let homeScore;\n        let awayScore;\n        if (fixture.event_final_result) {\n          // Format: \"2 - 1\"\n          const scoreParts = fixture.event_final_result.split(' - ');\n          homeScore = parseInt(scoreParts[0]) || 0;\n          awayScore = parseInt(scoreParts[1]) || 0;\n        } else {\n          homeScore = parseInt(fixture.event_home_final_result || fixture.match_hometeam_score || '0');\n          awayScore = parseInt(fixture.event_away_final_result || fixture.match_awayteam_score || '0');\n        }\n\n        // Determine if this team was home or away\n        const isHome = String(homeTeamId) === String(teamId);\n        const opponent = isHome ? awayTeamName : homeTeamName;\n        const teamScore = isHome ? homeScore : awayScore;\n        const opponentScore = isHome ? awayScore : homeScore;\n\n        // Determine result\n        let result;\n        if (teamScore > opponentScore) {\n          result = 'W';\n        } else if (teamScore < opponentScore) {\n          result = 'L';\n        } else {\n          result = 'D';\n        }\n\n        // Log each match for debugging\n        console.log(`[TeamFormService] Match ${index + 1}: ${matchDate} ${matchTime} - ${isHome ? 'HOME' : 'AWAY'} vs ${opponent} - Score: ${teamScore}-${opponentScore} - Result: ${result}`);\n        formResults.push({\n          result,\n          score: `${teamScore}-${opponentScore}`,\n          opponent: opponent || 'Unknown',\n          date: matchDate || '',\n          isHome\n        });\n      } catch (error) {\n        console.warn('[TeamFormService] Error processing fixture:', error, fixture);\n      }\n    });\n\n    // Take the first 5 results (they're already sorted by date DESC in fetchTeamFixtures)\n    const recentForm = formResults.slice(0, 5);\n\n    // Log the final form sequence\n    const formSequence = recentForm.map(r => r.result).join('');\n    console.log(`[TeamFormService] Final form sequence for ${teamName}: ${formSequence} (most recent first)`);\n    return recentForm;\n  }\n\n  /**\n   * Fetch team form data\n   */\n  async fetchTeamForm(teamId, teamName) {\n    const cacheKey = this.getCacheKey(teamId);\n    const cached = this.cache.get(cacheKey);\n\n    // Return cached data if valid\n    if (cached && this.isValidCache(cached.timestamp)) {\n      console.log(`[TeamFormService] Returning cached form data for team ${teamId}`);\n      return cached.data;\n    }\n    try {\n      console.log(`[TeamFormService] Fetching fresh form data for team ${teamId} (${teamName})`);\n\n      // Fetch recent fixtures\n      const fixtures = await this.fetchTeamFixtures(teamId, 10);\n\n      // Process fixtures to get form\n      const formResults = this.processFixtures(fixtures, teamId, teamName);\n\n      // Create form string (e.g., \"WWLDW\")\n      const formString = formResults.map(result => result.result).join('');\n      const teamForm = {\n        teamId,\n        teamName,\n        form: formResults,\n        formString\n      };\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: teamForm,\n        timestamp: Date.now()\n      });\n      console.log(`[TeamFormService] Successfully fetched form for ${teamName}: ${formString}`);\n      console.log(`[TeamFormService] Form details for ${teamName}:`, formResults);\n      return teamForm;\n    } catch (error) {\n      console.error(`[TeamFormService] Error fetching form for team ${teamId}:`, error);\n\n      // Return empty form data when API fails - no mock data\n      return {\n        teamId,\n        teamName,\n        form: [],\n        formString: ''\n      };\n    }\n  }\n\n  /**\n   * Fetch form data for both teams in a match\n   */\n  async fetchMatchTeamsForm(homeTeamId, homeTeamName, awayTeamId, awayTeamName) {\n    console.log(`[TeamFormService] Fetching form data for match: ${homeTeamName} vs ${awayTeamName}`);\n    try {\n      // Fetch both teams' form data in parallel\n      const [homeTeamForm, awayTeamForm] = await Promise.all([this.fetchTeamForm(homeTeamId, homeTeamName), this.fetchTeamForm(awayTeamId, awayTeamName)]);\n      return {\n        homeTeamForm,\n        awayTeamForm\n      };\n    } catch (error) {\n      console.error('[TeamFormService] Error fetching match teams form:', error);\n\n      // Return empty form data on error\n      return {\n        homeTeamForm: {\n          teamId: homeTeamId,\n          teamName: homeTeamName,\n          form: [],\n          formString: ''\n        },\n        awayTeamForm: {\n          teamId: awayTeamId,\n          teamName: awayTeamName,\n          form: [],\n          formString: ''\n        }\n      };\n    }\n  }\n\n  /**\n   * Clear cache for a specific team\n   */\n  clearTeamCache(teamId) {\n    const cacheKey = this.getCacheKey(teamId);\n    this.cache.delete(cacheKey);\n    console.log(`[TeamFormService] Cleared cache for team ${teamId}`);\n  }\n\n  /**\n   * Clear all cached data\n   */\n  clearAllCache() {\n    this.cache.clear();\n    console.log('[TeamFormService] Cleared all form cache');\n  }\n}\nexport default new TeamFormService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}