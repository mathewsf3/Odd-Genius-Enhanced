{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mathe\\\\OneDrive\\\\Desktop\\\\odd-genius - WORKING - Copy - Copy\\\\frontend\\\\src\\\\pages\\\\SpecialMatch.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, Container, Spinner, useColorModeValue, Tabs, TabList, TabPanels, Tab, TabPanel, Flex, Badge, Tooltip, Button } from '@chakra-ui/react';\nimport axios from 'axios';\n\n// Component imports\nimport CustomHeadToHeadTab from '../components/match/CustomHeadToHeadTab';\nimport CornerTabCustom from '../components/match/CornerTabCustom';\nimport CustomCardsTab from '../components/match/CustomCardsTab';\nimport CustomBTTSTab from '../components/match/CustomBTTSTab';\nimport CustomPlayerStatsTab from '../components/match/CustomPlayerStatsTab';\nimport CustomLeagueTab from '../components/match/CustomLeagueTab';\nimport MatchHeader from '../components/match/MatchHeader';\n\n// Import services\nimport cardStatsService from '../services/cardStatsService';\nimport bttsStatsService from '../services/bttsStatsService';\nimport playerStatsService from '../services/playerStatsService';\nimport leagueService from '../services/leagueService';\nimport teamFormService from '../services/teamFormService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initial match data structure - will be populated with real data from API\nconst INITIAL_MATCH_DATA = {\n  id: '',\n  homeTeam: {\n    id: '',\n    name: '',\n    logo: ''\n  },\n  awayTeam: {\n    id: '',\n    name: '',\n    logo: ''\n  },\n  league: {\n    id: '',\n    name: '',\n    country: '',\n    logo: ''\n  },\n  date: '',\n  time: '',\n  startTime: '',\n  status: '',\n  venue: '',\n  odds: {\n    home: 0,\n    draw: 0,\n    away: 0\n  },\n  probability: {\n    home: '0%',\n    draw: '0%',\n    away: '0%'\n  },\n  score: {\n    home: 0,\n    away: 0\n  }\n};\nconst SpecialMatch = ({\n  matchId: propMatchId\n}) => {\n  const params = useParams();\n  const matchId = propMatchId || params.id || '1530359'; // Use prop, then route param, then default (working match ID)\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [h2hData, setH2hData] = useState(null);\n  const [cornerStatsData, setCornerStatsData] = useState(null);\n  const [cardStatsData, setCardStatsData] = useState(null);\n  const [bttsStatsData, setBttsStatsData] = useState(null);\n  const [playerStatsData, setPlayerStatsData] = useState(null);\n  const [leagueStandingsData, setLeagueStandingsData] = useState(null);\n  const [homeTeamForm, setHomeTeamForm] = useState(null);\n  const [awayTeamForm, setAwayTeamForm] = useState(null);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [gameCount, setGameCount] = useState(10);\n  const [matchData, setMatchData] = useState(INITIAL_MATCH_DATA);\n  const bgColor = useColorModeValue('white', 'gray.800');\n\n  // Function to fetch real match data based on route parameter\n  const fetchMatchData = async id => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      console.log(`üîç [SpecialMatch] Fetching match data for ID: ${id}`);\n      console.log(`üîç [SpecialMatch] Previous match data:`, matchData);\n\n      // Clear all existing data when fetching new match\n      setH2hData(null);\n      setCornerStatsData(null);\n      setCardStatsData(null);\n      setBttsStatsData(null);\n      setPlayerStatsData(null);\n      setLeagueStandingsData(null);\n      setHomeTeamForm(null);\n      setAwayTeamForm(null);\n\n      // Try to fetch match data from backend API\n      const response = await axios.get(`http://localhost:5000/api/matches/${id}`);\n      if (response.data && response.data.success && response.data.result) {\n        console.log('‚úÖ [SpecialMatch] Successfully fetched real match data from backend:', response.data.result);\n        setMatchData(response.data.result);\n        setIsLoading(false);\n        return response.data.result;\n      } else {\n        console.log('‚ö†Ô∏è [SpecialMatch] No match data found in backend, trying AllSportsAPI directly');\n        // Try to fetch from AllSportsAPI directly\n        const directResponse = await axios.get(`https://apiv2.allsportsapi.com/football/?met=Fixtures&APIkey=9af98e929db6f98a1561c444b6179b5740a69b942cb3ffcc62b80a7eda5128b4&matchId=${id}`);\n        if (directResponse.data && directResponse.data.success && directResponse.data.result && directResponse.data.result.length > 0) {\n          const matchResult = directResponse.data.result[0];\n          console.log('‚úÖ [SpecialMatch] Successfully fetched match data from AllSportsAPI:', matchResult);\n\n          // Transform the API response to our Match interface\n          const transformedMatch = {\n            id: matchResult.match_id || id,\n            homeTeam: {\n              id: `team-${matchResult.match_hometeam_id}`,\n              name: matchResult.match_hometeam_name || 'Home Team',\n              logo: matchResult.team_home_badge || ''\n            },\n            awayTeam: {\n              id: `team-${matchResult.match_awayteam_id}`,\n              name: matchResult.match_awayteam_name || 'Away Team',\n              logo: matchResult.team_away_badge || ''\n            },\n            league: {\n              id: matchResult.league_id || '',\n              name: matchResult.league_name || 'Unknown League',\n              country: matchResult.country_name || '',\n              logo: matchResult.league_logo || ''\n            },\n            date: matchResult.match_date || '',\n            time: matchResult.match_time || '',\n            startTime: `${matchResult.match_date}T${matchResult.match_time}:00`,\n            status: matchResult.match_status || 'NS',\n            venue: matchResult.match_stadium || '',\n            odds: {\n              home: parseFloat(matchResult.match_hometeam_score) || 0,\n              draw: 0,\n              away: parseFloat(matchResult.match_awayteam_score) || 0\n            },\n            probability: {\n              home: '0%',\n              draw: '0%',\n              away: '0%'\n            },\n            score: {\n              home: parseInt(matchResult.match_hometeam_score) || 0,\n              away: parseInt(matchResult.match_awayteam_score) || 0\n            }\n          };\n          console.log('üîÑ [SpecialMatch] Transformed match data:', transformedMatch);\n          setMatchData(transformedMatch);\n          setIsLoading(false);\n          return transformedMatch;\n        } else {\n          throw new Error('No match data found in AllSportsAPI');\n        }\n      }\n    } catch (error) {\n      console.error('‚ùå [SpecialMatch] Error fetching match data:', error);\n      setError(`Unable to load match data for ID: ${id}. This match may not be available in the current live or upcoming matches. Please try selecting a different match from the dashboard.`);\n      setIsLoading(false);\n      return null;\n    }\n  };\n\n  // Function to fetch corner stats data\n  const fetchCornerStatsData = async (count = gameCount) => {\n    try {\n      console.log(`üîç [SpecialMatch] Fetching corner statistics from backend for match ID: ${matchId}`);\n\n      // First clear existing data only if count has changed to ensure we see a loading state\n      if (count !== gameCount) {\n        setCornerStatsData(null);\n      }\n\n      // Add a small delay for better UX when using cached data\n      if (count === gameCount) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Fetch corner statistics from backend endpoint with match count parameter\n      const response = await axios.get(`http://localhost:5000/api/matches/${matchId}/corners?matches=${count}`);\n      if (response.data && response.data.success && response.data.result) {\n        console.log('‚úÖ [SpecialMatch] Successfully fetched corner stats from backend:', response.data.result);\n\n        // Update gameCount state if it has changed\n        if (count !== gameCount) {\n          setGameCount(count);\n        }\n        setCornerStatsData(response.data.result);\n\n        // Clear any previous errors\n        if (error) {\n          setError(null);\n        }\n        return response.data.result;\n      } else {\n        throw new Error('No corner statistics data found in backend response');\n      }\n    } catch (err) {\n      console.error('‚ùå [SpecialMatch] Error fetching corner stats data:', err);\n      // Set error state to inform the user that corner stats data couldn't be loaded\n      setError('Unable to load corner statistics data. Please try again later.');\n      throw err; // Rethrow to allow the component to handle it\n    }\n  };\n\n  // Function to fetch card stats data\n  const fetchCardStatsData = async (count = gameCount) => {\n    try {\n      console.log(`üîç [SpecialMatch] Fetching card statistics from backend for match ID: ${matchId}`);\n\n      // First clear existing data only if count has changed to ensure we see a loading state\n      if (count !== gameCount) {\n        setCardStatsData(null);\n      }\n\n      // Add a small delay for better UX when using cached data\n      if (count === gameCount) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n\n      // Use the card stats service to fetch data from backend\n      const data = await cardStatsService.fetchCardStats(matchId, count);\n      console.log('‚úÖ [SpecialMatch] Successfully fetched card stats from backend:', data);\n\n      // Update gameCount state if it has changed\n      if (count !== gameCount) {\n        setGameCount(count);\n      }\n      setCardStatsData(data);\n\n      // Clear any previous errors\n      if (error) {\n        setError(null);\n      }\n      return data;\n    } catch (err) {\n      console.error('‚ùå [SpecialMatch] Error fetching card stats data:', err);\n      // Set error state to inform the user that card stats data couldn't be loaded\n      setError('Unable to load card statistics data. Please try again later.');\n      throw err; // Rethrow to allow the component to handle it\n    }\n  };\n\n  // Function to fetch BTTS stats data\n  const fetchBTTSStatsData = async (count = gameCount) => {\n    try {\n      console.log(`Fetching BTTS statistics with ${count} games - fresh API call`);\n\n      // First clear existing data to ensure we see a loading state\n      setBttsStatsData(null);\n\n      // Add a small delay for better UX when using cached data\n      if (count === gameCount) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      const data = await bttsStatsService.fetchBTTSStats(matchId, count);\n      console.log(`Successfully fetched BTTS stats data for ${count} games`);\n\n      // Update gameCount state if it has changed\n      if (count !== gameCount) {\n        setGameCount(count);\n      }\n      setBttsStatsData(data);\n\n      // Clear any previous errors\n      if (error) {\n        setError(null);\n      }\n      return data;\n    } catch (err) {\n      console.error('Error fetching BTTS stats data:', err);\n      // Set error state to inform the user that BTTS stats data couldn't be loaded\n      setError('Unable to load BTTS statistics data. Please try again later.');\n      throw err; // Rethrow to allow the component to handle it\n    }\n  };\n\n  // Function to fetch player stats data - following Card Stats and BTTS pattern\n  const fetchPlayerStatsData = async (count = gameCount) => {\n    try {\n      console.log(`Fetching player statistics with ${count} games - fresh API call`);\n\n      // First clear existing data to ensure we see a loading state\n      setPlayerStatsData(null);\n\n      // Add a small delay for better UX when using cached data\n      if (count === gameCount) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      const data = await playerStatsService.fetchPlayerStatsForMatch(matchId, count);\n      console.log(`Successfully fetched player stats data for ${count} games`);\n\n      // Update gameCount state if it has changed\n      if (count !== gameCount) {\n        setGameCount(count);\n      }\n      setPlayerStatsData(data);\n\n      // Clear any previous errors\n      if (error) {\n        setError(null);\n      }\n      return data;\n    } catch (err) {\n      console.error('Error fetching player stats data:', err);\n      // Set error state to inform the user that player stats data couldn't be loaded\n      setError('Unable to load player statistics data. Please try again later.');\n      throw err; // Rethrow to allow the component to handle it\n    }\n  };\n\n  // Function to fetch team form data\n  const fetchTeamFormData = async () => {\n    try {\n      console.log(`Fetching team form data - fresh API call`);\n\n      // First clear existing data to ensure we see a loading state\n      setHomeTeamForm(null);\n      setAwayTeamForm(null);\n\n      // Get team IDs - remove \"team-\" prefix if it exists since API expects numeric IDs\n      const rawHomeTeamId = matchData.homeTeam.id; // e.g. \"team-93\"\n      const rawAwayTeamId = matchData.awayTeam.id; // e.g. \"team-4973\"\n\n      // Extract team IDs - handle both numeric IDs and name-based IDs\n      const homeTeamId = rawHomeTeamId.startsWith('team-') ? rawHomeTeamId.replace('team-', '') : rawHomeTeamId;\n      const awayTeamId = rawAwayTeamId.startsWith('team-') ? rawAwayTeamId.replace('team-', '') : rawAwayTeamId;\n      console.log(`Fetching form data for teams - Raw IDs: ${rawHomeTeamId} vs ${rawAwayTeamId}`);\n      console.log(`Using processed IDs: ${homeTeamId} vs ${awayTeamId}`);\n\n      // Check if both teams have numeric IDs (required for API calls)\n      const homeTeamHasNumericId = /^\\d+$/.test(homeTeamId);\n      const awayTeamHasNumericId = /^\\d+$/.test(awayTeamId);\n      if (!homeTeamHasNumericId || !awayTeamHasNumericId) {\n        console.warn('‚ö†Ô∏è [SpecialMatch] Teams do not have numeric IDs, skipping form data:', {\n          homeTeamId,\n          awayTeamId,\n          homeTeamHasNumericId,\n          awayTeamHasNumericId\n        });\n        setHomeTeamForm(null);\n        setAwayTeamForm(null);\n        return;\n      }\n\n      // Add a small delay for better UX\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const formData = await teamFormService.fetchMatchTeamsForm(homeTeamId, matchData.homeTeam.name, awayTeamId, matchData.awayTeam.name);\n      console.log(`Successfully fetched team form data`);\n      setHomeTeamForm(formData.homeTeamForm);\n      setAwayTeamForm(formData.awayTeamForm);\n\n      // Clear any previous errors\n      if (error) {\n        setError(null);\n      }\n      return formData;\n    } catch (err) {\n      console.error('Error fetching team form data:', err);\n      // Set error state to inform the user that form data couldn't be loaded\n      setError('Unable to load team form data. Please try again later.');\n      throw err; // Rethrow to allow the component to handle it\n    }\n  };\n\n  // Function to fetch league standings data\n  const fetchLeagueStandingsData = async () => {\n    try {\n      console.log(`Fetching league standings data - fresh API call`);\n\n      // First clear existing data to ensure we see a loading state\n      setLeagueStandingsData(null);\n\n      // Get league ID from match data\n      const leagueId = matchData.league.id;\n\n      // Get team IDs - remove \"team-\" prefix if it exists since API expects numeric IDs\n      const rawHomeTeamId = matchData.homeTeam.id; // e.g. \"team-93\"\n      const rawAwayTeamId = matchData.awayTeam.id; // e.g. \"team-4973\"\n\n      // Extract team IDs - handle both numeric IDs and name-based IDs\n      const homeTeamId = rawHomeTeamId.startsWith('team-') ? rawHomeTeamId.replace('team-', '') : rawHomeTeamId;\n      const awayTeamId = rawAwayTeamId.startsWith('team-') ? rawAwayTeamId.replace('team-', '') : rawAwayTeamId;\n      console.log(`Fetching league standings for league ID: ${leagueId}`);\n      console.log(`Home team ID: ${homeTeamId}, Away team ID: ${awayTeamId}`);\n\n      // Add a small delay for better UX\n      await new Promise(resolve => setTimeout(resolve, 500));\n      const data = await leagueService.fetchLeagueStandings(leagueId, homeTeamId, awayTeamId);\n      console.log(`Successfully fetched league standings data`);\n      setLeagueStandingsData(data);\n\n      // Clear any previous errors\n      if (error) {\n        setError(null);\n      }\n      return data;\n    } catch (err) {\n      console.error('Error fetching league standings data:', err);\n      // Set error state to inform the user that league standings data couldn't be loaded\n      setError('Unable to load league standings data. Please try again later.');\n      throw err; // Rethrow to allow the component to handle it\n    }\n  };\n\n  // Fetch all statistics data after match data is loaded\n  useEffect(() => {\n    // Only fetch stats if we have valid match data (team IDs are not empty)\n    if (matchData.homeTeam.id && matchData.awayTeam.id && matchData.homeTeam.id !== '' && matchData.awayTeam.id !== '') {\n      console.log('Match data loaded, now fetching all statistics...');\n      fetchCornerStatsData();\n      fetchCardStatsData();\n      fetchBTTSStatsData();\n      fetchPlayerStatsData();\n      fetchLeagueStandingsData();\n      fetchTeamFormData();\n    }\n  }, [matchData.homeTeam.id, matchData.awayTeam.id]); // Trigger when team IDs change\n\n  // Listen for game count change events\n  useEffect(() => {\n    // Event handler for game count changes\n    const handleGameCountChange = e => {\n      const newGameCount = e.detail.gameCount;\n      const requiresRefetch = e.detail.requiresRefetch;\n      console.log(`Game count changed to ${newGameCount}, requires refetch: ${requiresRefetch}`);\n\n      // First update state\n      setGameCount(newGameCount);\n\n      // Clear existing data to indicate loading state\n      setCornerStatsData(null);\n      setCardStatsData(null);\n      setBttsStatsData(null);\n      setPlayerStatsData(null);\n\n      // Then trigger data refresh with full refetch from API\n      fetchCornerStatsData(newGameCount);\n      fetchCardStatsData(newGameCount);\n      fetchBTTSStatsData(newGameCount);\n      fetchPlayerStatsData(newGameCount);\n    };\n\n    // Add event listener\n    document.addEventListener('gameCountChange', handleGameCountChange);\n\n    // Clean up\n    return () => {\n      document.removeEventListener('gameCountChange', handleGameCountChange);\n    };\n  }, [/* no dependencies to ensure it's only set up once */]);\n\n  // Fetch match data when component mounts or matchId changes\n  useEffect(() => {\n    console.log(`SpecialMatch component mounted with matchId: ${matchId}`);\n    console.log(`Current match data:`, matchData);\n    console.log(`Route params:`, params);\n    console.log(`Prop matchId:`, propMatchId);\n    fetchMatchData(matchId);\n  }, [matchId]);\n\n  // Fetch H2H data using our service with UPDATED API KEY\n  useEffect(() => {\n    // Only fetch H2H data if we have valid match data\n    if (!matchData.homeTeam.id || !matchData.awayTeam.id || matchData.homeTeam.id === '' || matchData.awayTeam.id === '') {\n      console.log(\"Waiting for match data before fetching H2H data...\");\n      return;\n    }\n    console.log(\"Starting to fetch head-to-head data with updated API key...\");\n    const fetchH2HData = async () => {\n      try {\n        // Extract team IDs from the URL format\n        const homeTeamId = matchData.homeTeam.id.replace('team-', ''); // 93\n        const awayTeamId = matchData.awayTeam.id.replace('team-', ''); // 4973\n\n        console.log(`Fetching real H2H data for teams ${homeTeamId} vs ${awayTeamId}`);\n\n        // Check if both teams have numeric IDs (required for API calls)\n        const homeTeamHasNumericId = /^\\d+$/.test(homeTeamId);\n        const awayTeamHasNumericId = /^\\d+$/.test(awayTeamId);\n        if (!homeTeamHasNumericId || !awayTeamHasNumericId) {\n          console.warn('‚ö†Ô∏è [SpecialMatch] Teams do not have numeric IDs, skipping H2H data:', {\n            homeTeamId,\n            awayTeamId,\n            homeTeamHasNumericId,\n            awayTeamHasNumericId\n          });\n          setError('H2H data not available - teams do not have numeric IDs required for API calls');\n          return;\n        }\n\n        // Use backend H2H endpoint to ensure consistency with backend logs\n        console.log(`Making H2H request to backend: /api/matches/${matchId}/h2h`);\n        const response = await axios.get(`http://localhost:5000/api/matches/${matchId}/h2h`);\n        console.log('Backend H2H response received:', response.data.success ? 'Success' : 'Failed');\n        if (response.data && response.data.success) {\n          // Backend returns already transformed H2H data\n          const h2hData = response.data.result;\n          console.log('Backend H2H data received:', h2hData);\n\n          // Ensure the data has the correct structure\n          if (h2hData && h2hData.matches && h2hData.summary) {\n            // Set the data directly since it's already in the correct format\n            setH2hData(h2hData);\n            console.log(`Successfully processed ${h2hData.matches.length} head-to-head matches from backend`);\n            console.log(`${h2hData.firstTeam.name} wins: ${h2hData.summary.wins.firstTeam}`);\n            console.log(`${h2hData.secondTeam.name} wins: ${h2hData.summary.wins.secondTeam}`);\n            console.log(`Draws: ${h2hData.summary.wins.draws}`);\n          } else {\n            console.error('Invalid H2H data structure from backend:', h2hData);\n            setError('Invalid head-to-head data received from backend');\n          }\n        } else {\n          setError('Failed to fetch head-to-head data');\n        }\n      } catch (err) {\n        console.error('Error fetching H2H data:', err);\n        // Provide a more specific error message\n        if (err instanceof Error) {\n          setError(`Error fetching head-to-head data: ${err.message}`);\n        } else {\n          setError('Error fetching head-to-head data: Unknown error');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchH2HData();\n  }, [matchData.homeTeam.id, matchData.awayTeam.id]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      centerContent: true,\n      py: 10,\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        size: \"xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      centerContent: true,\n      py: 10,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        bg: \"red.100\",\n        border: \"4px solid\",\n        borderColor: \"red.500\",\n        color: \"red.700\",\n        p: 4,\n        borderRadius: \"md\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    bg: bgColor,\n    minH: \"100vh\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxW: \"container.xl\",\n      py: 5,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        bg: bgColor,\n        p: 4,\n        borderRadius: \"md\",\n        boxShadow: \"sm\",\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(MatchHeader, {\n          match: matchData,\n          homeTeamForm: homeTeamForm,\n          awayTeamForm: awayTeamForm,\n          isLoadingForm: !homeTeamForm && !awayTeamForm && !error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this), \"            \", /*#__PURE__*/_jsxDEV(Box, {\n          mt: 2,\n          p: 2,\n          bg: \"blue.50\",\n          borderRadius: \"md\",\n          fontSize: \"sm\",\n          color: \"blue.700\",\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Data Source:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 619,\n                columnNumber: 19\n              }, this), \" AllSportsAPI - Real H2H data for \", matchData.homeTeam.name, \" vs \", matchData.awayTeam.name, \"(Updated: \", new Date().toLocaleDateString(), \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              alignItems: \"center\",\n              gap: 2,\n              children: [/*#__PURE__*/_jsxDEV(Badge, {\n                colorScheme: \"blue\",\n                fontSize: \"sm\",\n                children: [\"Analyzing: Last \", gameCount, \" matches\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                label: \"Clear all data cache\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"xs\",\n                  colorScheme: \"blue\",\n                  variant: \"ghost\",\n                  onClick: () => {\n                    cardStatsService.clearCardStatsCache();\n                    bttsStatsService.clearBTTSStatsCache();\n                    playerStatsService.clearPlayerStatsCache();\n                    leagueService.clearLeagueStandingsCache();\n                    teamFormService.clearAllCache();\n                    // Refresh all stats with force refresh\n                    fetchCornerStatsData(gameCount);\n                    fetchCardStatsData(gameCount);\n                    fetchBTTSStatsData(gameCount);\n                    fetchPlayerStatsData(gameCount);\n                    fetchLeagueStandingsData();\n                    fetchTeamFormData();\n                  },\n                  children: \"Reset Cache\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 625,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 622,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 65\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 6,\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          isFitted: true,\n          variant: \"enclosed\",\n          colorScheme: \"blue\",\n          index: tabIndex,\n          onChange: index => {\n            console.log(`Switching to tab index ${index}, keeping gameCount: ${gameCount}`);\n            setTabIndex(index);\n          },\n          children: [/*#__PURE__*/_jsxDEV(TabList, {\n            mb: \"1em\",\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              fontWeight: \"medium\",\n              children: \"Head to Head\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              fontWeight: \"medium\",\n              children: \"Corner Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              fontWeight: \"medium\",\n              children: \"Card Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              fontWeight: \"medium\",\n              children: \"BTTS Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              fontWeight: \"medium\",\n              children: \"Player Stats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              fontWeight: \"medium\",\n              children: \"League\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 662,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TabPanels, {\n            children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n              p: 0,\n              children: /*#__PURE__*/_jsxDEV(CustomHeadToHeadTab, {\n                match: matchData,\n                data: h2hData,\n                isLoading: false,\n                initialMatchRange: gameCount\n              }, h2hData ? `h2h-${h2hData.summary.wins.firstTeam}-${h2hData.summary.wins.secondTeam}-${h2hData.summary.wins.draws}-${h2hData.summary.goals.firstTeam}-${h2hData.summary.goals.secondTeam}-${gameCount}` : 'h2h-loading', false, {\n                fileName: _jsxFileName,\n                lineNumber: 668,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              p: 0,\n              children: [console.log(\"Corner stats data in SpecialMatch:\", cornerStatsData), /*#__PURE__*/_jsxDEV(CornerTabCustom, {\n                match: matchData,\n                data: cornerStatsData,\n                isLoading: !cornerStatsData && !error,\n                initialGameCount: gameCount.toString(),\n                onRefresh: fetchCornerStatsData\n              }, gameCount + \"-\" + (cornerStatsData ? 'data' : 'no-data'), false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              p: 0,\n              children: [console.log(\"Card stats data in SpecialMatch:\", cardStatsData), /*#__PURE__*/_jsxDEV(CustomCardsTab, {\n                match: matchData,\n                data: cardStatsData,\n                isLoading: !cardStatsData && !error,\n                initialGameCount: gameCount.toString(),\n                onRefresh: fetchCardStatsData\n              }, gameCount + \"-\" + (cardStatsData ? 'data' : 'no-data'), false, {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              p: 0,\n              children: [console.log(\"BTTS stats data in SpecialMatch:\", bttsStatsData), /*#__PURE__*/_jsxDEV(CustomBTTSTab, {\n                match: matchData,\n                data: bttsStatsData,\n                isLoading: !bttsStatsData && !error,\n                initialGameCount: gameCount.toString(),\n                onRefresh: fetchBTTSStatsData\n              }, gameCount + \"-\" + (bttsStatsData ? 'data' : 'no-data'), false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              p: 0,\n              children: [console.log(\"Player stats data in SpecialMatch:\", playerStatsData), /*#__PURE__*/_jsxDEV(CustomPlayerStatsTab, {\n                match: matchData,\n                data: playerStatsData,\n                isLoading: !playerStatsData && !error,\n                initialGameCount: gameCount.toString(),\n                onGameCountChange: count => {\n                  console.log(`Changing game count to ${count} from Player Stats tab`);\n                  // Dispatch the same event as other tabs\n                  const customEvent = new CustomEvent('gameCountChange', {\n                    detail: {\n                      gameCount: count,\n                      requiresRefetch: true\n                    },\n                    bubbles: true\n                  });\n                  document.dispatchEvent(customEvent);\n                },\n                onRefresh: fetchPlayerStatsData\n              }, gameCount + \"-\" + (playerStatsData ? 'data' : 'no-data'), false, {\n                fileName: _jsxFileName,\n                lineNumber: 715,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TabPanel, {\n              p: 0,\n              children: /*#__PURE__*/_jsxDEV(CustomLeagueTab, {\n                match: matchData,\n                data: leagueStandingsData,\n                isLoading: !leagueStandingsData && !error,\n                onRefresh: fetchLeagueStandingsData\n              }, \"league-standings\", false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 599,\n    columnNumber: 5\n  }, this);\n};\nexport default SpecialMatch;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}