{"ast":null,"code":"import axios from'axios';import{API_KEY}from'../config/api-config';// Base URL for the API\nconst BASE_URL='https://apiv2.allsportsapi.com/football';// Types for league standings\n// Cache for league standings data to reduce API calls\nconst leagueStandingsCache={};// Cache expiration time (30 minutes)\nconst CACHE_EXPIRATION=30*60*1000;// Clear cache function\nexport const clearLeagueStandingsCache=()=>{Object.keys(leagueStandingsCache).forEach(key=>{delete leagueStandingsCache[key];});console.log('[LeagueService] Cache cleared');};// Format team standings data\nconst formatTeamStandings=(standings,homeTeamId,awayTeamId)=>{return standings.map(standing=>({position:parseInt(standing.standing_place),team:{id:standing.team_key,name:standing.standing_team,logo:`https://apiv2.allsportsapi.com/logo/${standing.team_key}_${standing.standing_team.toLowerCase().replace(/\\s+/g,'-')}.png`},played:parseInt(standing.standing_P),won:parseInt(standing.standing_W),drawn:parseInt(standing.standing_D),lost:parseInt(standing.standing_L),goalsFor:parseInt(standing.standing_F),goalsAgainst:parseInt(standing.standing_A),goalDifference:parseInt(standing.standing_GD),points:parseInt(standing.standing_PTS),form:[],// We don't have form data from the API\nhomeTeamId:homeTeamId,awayTeamId:awayTeamId}));};// Fetch league standings from the API\nconst fetchLeagueStandings=async(leagueId,homeTeamId,awayTeamId,signal)=>{try{console.log(`[LeagueService] Fetching standings for league ${leagueId}`);// Check cache first\nconst cacheKey=`league_${leagueId}`;const cachedData=leagueStandingsCache[cacheKey];if(cachedData&&Date.now()-cachedData.timestamp<CACHE_EXPIRATION){console.log(`[LeagueService] Using cached data for league ${leagueId}`);return cachedData.data;}// Use direct URL construction to avoid any potential issues with axios params\nconst url=`${BASE_URL}/?met=Standings&leagueId=${leagueId}&APIkey=${API_KEY}`;console.log(`[LeagueService] Making API request to: ${url.replace(API_KEY,'API_KEY_HIDDEN')}`);const response=await axios.get(url,{signal,timeout:8000,decompress:true});// Check if the API response is valid\nif(!response.data||response.data.success!==1||!response.data.result){console.error('[LeagueService] Invalid API response:',response.data);return null;}const apiStandings=response.data.result;// Extract league info from first standing entry\nconst firstStanding=apiStandings.total[0]||{};// Format the standings data\nconst formattedStandings={league:{id:firstStanding.league_key,name:firstStanding.league_season?`${firstStanding.league_season}`:'League Standings',season:firstStanding.league_season},standings:formatTeamStandings(apiStandings.total,homeTeamId,awayTeamId)};// Cache the formatted data\nleagueStandingsCache[cacheKey]={data:formattedStandings,timestamp:Date.now()};return formattedStandings;}catch(error){console.error('[LeagueService] Error fetching league standings:',error);return null;}};// Export the service\nconst leagueService={fetchLeagueStandings,clearLeagueStandingsCache};export default leagueService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}